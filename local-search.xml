<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>hexo设置指南</title>
    <link href="/2023/11/18/hexo%E8%AE%BE%E7%BD%AE%E6%8C%87%E5%8D%97/"/>
    <url>/2023/11/18/hexo%E8%AE%BE%E7%BD%AE%E6%8C%87%E5%8D%97/</url>
    
    <content type="html"><![CDATA[<h1 id="hexo的设置指南"><a href="#hexo的设置指南" class="headerlink" title="hexo的设置指南"></a>hexo的设置指南</h1><h2 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h2><p>可以使用npm一键安装脚本。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 对于windows用户，直接去官网下载node.js，安装后设置path</span><br>https://nodejs.org/en/download<br><span class="hljs-comment"># 对于Debian系的Linux，如Ubuntu，可以使用apt安装</span><br>sudo apt install npm<br><span class="hljs-comment"># 对于ArchLinux，可以使用pacman安装</span><br>sudo pacman -Sy npm<br></code></pre></td></tr></table></figure><p>安装hexo</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install -g hexo-cli<br></code></pre></td></tr></table></figure><p>确认安装完成，查看版本号</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo -v<br><span class="hljs-comment">#INFO  Validating config</span><br><span class="hljs-comment"># hexo: 6.3.0</span><br><span class="hljs-comment"># hexo-cli: 4.3.1</span><br><span class="hljs-comment"># os: win32 10.0.22631</span><br><span class="hljs-comment"># node: 20.9.0</span><br><span class="hljs-comment"># acorn: 8.10.0</span><br><span class="hljs-comment"># ada: 2.6.0</span><br><span class="hljs-comment"># ares: 1.19.1</span><br><span class="hljs-comment"># base64: 0.5.0</span><br><span class="hljs-comment"># brotli: 1.0.9</span><br><span class="hljs-comment"># cjs_module_lexer: 1.2.2</span><br><span class="hljs-comment"># cldr: 43.1</span><br><span class="hljs-comment"># icu: 73.2</span><br><span class="hljs-comment"># llhttp: 8.1.1</span><br><span class="hljs-comment"># modules: 115</span><br><span class="hljs-comment"># napi: 9</span><br><span class="hljs-comment"># nghttp2: 1.57.0</span><br><span class="hljs-comment"># nghttp3: 0.7.0</span><br><span class="hljs-comment"># ngtcp2: 0.8.1</span><br><span class="hljs-comment"># openssl: 3.0.10+quic</span><br><span class="hljs-comment"># simdutf: 3.2.17</span><br><span class="hljs-comment"># tz: 2023c</span><br><span class="hljs-comment"># undici: 5.26.3</span><br><span class="hljs-comment"># unicode: 15.0</span><br><span class="hljs-comment"># uv: 1.46.0</span><br><span class="hljs-comment"># uvwasi: 0.0.18</span><br><span class="hljs-comment"># v8: 11.3.244.8-node.16</span><br><span class="hljs-comment"># zlib: 1.2.13.1-motley</span><br></code></pre></td></tr></table></figure><h1 id="2-创建项目hexo并初始化"><a href="#2-创建项目hexo并初始化" class="headerlink" title="2. 创建项目hexo并初始化"></a>2. 创建项目<strong>hexo</strong>并初始化</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo init hexo<br><span class="hljs-built_in">cd</span> hexo<br>npm install<br></code></pre></td></tr></table></figure><h1 id="3-本地启动"><a href="#3-本地启动" class="headerlink" title="3. 本地启动"></a>3. 本地启动</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo g //hexo generate<br>hexo server<br></code></pre></td></tr></table></figure><p>本地服务启动，端口号是4000，打开浏览器输入</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">http:</span><span class="hljs-comment">//localhost:4000</span><br></code></pre></td></tr></table></figure><h1 id="4-更换主题"><a href="#4-更换主题" class="headerlink" title="4. 更换主题"></a>4. 更换主题</h1><p>主题可以从<a href="https://hexo.io/themes/">官网</a>找自己喜欢的。本文以<strong>Next</strong>为例。</p><p>安装主题,在根目录下面的themes文件夹中,将克隆的文件放到&#x2F;themes&#x2F;next文件夹中。</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">cd</span> hexo-blog<br>git clone https://github.<span class="hljs-keyword">com</span>/<span class="hljs-keyword">next</span>-theme/hexo-theme-<span class="hljs-keyword">next</span>.git themes/<span class="hljs-keyword">next</span><br></code></pre></td></tr></table></figure><p>从根目录找到_config.yml文件，在文件中找到<strong>theme</strong>字段，修改为<strong>next</strong>。</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs autoit"><span class="hljs-meta"># theme: landscape</span><br>theme: <span class="hljs-keyword">next</span><br></code></pre></td></tr></table></figure><p>本地启动，进行测试。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo g //hexo generate<br>hexo server<br></code></pre></td></tr></table></figure><h1 id="5-创建文章"><a href="#5-创建文章" class="headerlink" title="5.创建文章"></a>5.创建文章</h1><p>打开根目录中的 _config.yml进行确认，为了在生成文章的时候生成一个同名的资源目录用于存放图片文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">post_asset_folder:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>使用如下命令，创建一篇新文章，名为“test”</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haxe">hexo <span class="hljs-keyword">new</span> <span class="hljs-type">post</span> test<br></code></pre></td></tr></table></figure><p>关于图片的引用，可参考<a href="https://hexo.io/zh-cn/docs/asset-folders.html">官方文档</a></p><p>下面给出了三种引用方式：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">test</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2023-11-18 19:14:26</span><br><span class="hljs-attr">tags:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">test</span><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-string">This</span> <span class="hljs-string">paper</span> <span class="hljs-string">is</span> <span class="hljs-string">used</span> <span class="hljs-string">for</span> <span class="hljs-string">testing.</span><br><br>&#123;<span class="hljs-string">%</span> <span class="hljs-string">asset_img</span> <span class="hljs-string">test.png</span> <span class="hljs-string">图片引用方法一</span> <span class="hljs-string">%</span>&#125;<br><br><span class="hljs-type">![</span><span class="hljs-string">图片引用方法二](test.png)</span><br><br><span class="hljs-type">![</span><span class="hljs-string">图片引用方法三](/images/test.png)</span><br></code></pre></td></tr></table></figure><h1 id="6-页面细节改动"><a href="#6-页面细节改动" class="headerlink" title="6. 页面细节改动"></a>6. 页面细节改动</h1><p>页面的细节改动，主要从_config.yml文件中进行修改。具体的自定义修改可查看<a href="https://hexo.io/docs/">官方文档</a></p><h1 id="7-发布到githubPages"><a href="#7-发布到githubPages" class="headerlink" title="7.发布到githubPages"></a>7.发布到githubPages</h1><p>安装hexo-deployer-git</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">npm install hexo-deployer-git <span class="hljs-comment">--save</span><br></code></pre></td></tr></table></figure><p>修改_config.yml文件，配置github信息</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">deploy:</span><br><span class="hljs-symbol">    type:</span> git<br><span class="hljs-symbol">    repo:</span> https:<span class="hljs-comment">//github.com/your-github-id/your-github-id.github.io.git</span><br><span class="hljs-symbol">    branch:</span> main<br><span class="hljs-symbol">    token:</span> (githubPagesToken)<br></code></pre></td></tr></table></figure><p>token需要从GitHub获取，并授予token管理库的权限。<br>设置完毕后，执行部署命令</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo g -d</span><br></code></pre></td></tr></table></figure><p>建议先本地测试，再进行部署</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs scss">hexo clean<br>hexo <span class="hljs-built_in">g</span>(enerate)<br>hexo <span class="hljs-built_in">s</span>(erver)<br># 本地测试通过后<br>hexo <span class="hljs-built_in">d</span>(eploy)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>写入excel表格</title>
    <link href="/2023/11/18/%E5%86%99%E5%85%A5excel%E8%A1%A8%E6%A0%BC/"/>
    <url>/2023/11/18/%E5%86%99%E5%85%A5excel%E8%A1%A8%E6%A0%BC/</url>
    
    <content type="html"><![CDATA[<h1 id="将数据写入-excel-表格"><a href="#将数据写入-excel-表格" class="headerlink" title="将数据写入 excel 表格"></a>将数据写入 excel 表格</h1><p>用的是 xlrd 和 xlwt，由于需要频繁开关xls文件，不适合连续写入，建议 <strong>openpyxl</strong> 库，后续会进行更新。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># coding=UTF-8</span><br><span class="hljs-keyword">import</span> xlrd<br><span class="hljs-keyword">import</span> xlwt<br><span class="hljs-keyword">from</span> xlutils.copy <span class="hljs-keyword">import</span> copy<br> <br> <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">write_excel_xls</span>(<span class="hljs-params">path, sheet_name, value</span>):<br>    index = <span class="hljs-built_in">len</span>(value)  <span class="hljs-comment"># 获取需要写入数据的行数</span><br>    workbook = xlwt.Workbook()  <span class="hljs-comment"># 新建一个工作簿</span><br>    sheet = workbook.add_sheet(sheet_name)  <span class="hljs-comment"># 在工作簿中新建一个表格</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, index):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(value[i])):<br>            sheet.write(i, j, value[i][j])  <span class="hljs-comment"># 像表格中写入数据（对应的行和列）</span><br>    workbook.save(path)  <span class="hljs-comment"># 保存工作簿</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;xls格式表格写入数据成功！&quot;</span>)<br> <br> <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">write_excel_xls_append</span>(<span class="hljs-params">path, value</span>):<br>    index = <span class="hljs-built_in">len</span>(value)  <span class="hljs-comment"># 获取需要写入数据的行数</span><br>    workbook = xlrd.open_workbook(path)  <span class="hljs-comment"># 打开工作簿</span><br>    sheets = workbook.sheet_names()  <span class="hljs-comment"># 获取工作簿中的所有表格</span><br>    worksheet = workbook.sheet_by_name(sheets[<span class="hljs-number">0</span>])  <span class="hljs-comment"># 获取工作簿中所有表格中的的第一个表格</span><br>    rows_old = worksheet.nrows  <span class="hljs-comment"># 获取表格中已存在的数据的行数</span><br>    new_workbook = copy(workbook)  <span class="hljs-comment"># 将xlrd对象拷贝转化为xlwt对象</span><br>    new_worksheet = new_workbook.get_sheet(<span class="hljs-number">0</span>)  <span class="hljs-comment"># 获取转化后工作簿中的第一个表格</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, index):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(value[i])):<br>            new_worksheet.write(i+rows_old, j, value[i][j])  <span class="hljs-comment"># 追加写入数据，注意是从i+rows_old行开始写入</span><br>    new_workbook.save(path)  <span class="hljs-comment"># 保存工作簿</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;xls格式表格【追加】写入数据成功！&quot;</span>)<br> <br> <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">read_excel_xls</span>(<span class="hljs-params">path</span>):<br>    workbook = xlrd.open_workbook(path)  <span class="hljs-comment"># 打开工作簿</span><br>    sheets = workbook.sheet_names()  <span class="hljs-comment"># 获取工作簿中的所有表格</span><br>    worksheet = workbook.sheet_by_name(sheets[<span class="hljs-number">0</span>])  <span class="hljs-comment"># 获取工作簿中所有表格中的的第一个表格</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, worksheet.nrows):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, worksheet.ncols):<br>            <span class="hljs-built_in">print</span>(worksheet.cell_value(i, j), <span class="hljs-string">&quot;\t&quot;</span>, end=<span class="hljs-string">&quot;&quot;</span>)  <span class="hljs-comment"># 逐行逐列读取数据</span><br>        <span class="hljs-built_in">print</span>()<br> <br> <br>book_name_xls = <span class="hljs-string">&#x27;xls格式测试工作簿.xls&#x27;</span><br> <br>sheet_name_xls = <span class="hljs-string">&#x27;xls格式测试表&#x27;</span><br> <br>value_title = [[<span class="hljs-string">&quot;姓名&quot;</span>, <span class="hljs-string">&quot;性别&quot;</span>, <span class="hljs-string">&quot;年龄&quot;</span>, <span class="hljs-string">&quot;城市&quot;</span>, <span class="hljs-string">&quot;职业&quot;</span>],]<br> <br>value1 = [[<span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-string">&quot;男&quot;</span>, <span class="hljs-string">&quot;19&quot;</span>, <span class="hljs-string">&quot;杭州&quot;</span>, <span class="hljs-string">&quot;研发工程师&quot;</span>],<br>          [<span class="hljs-string">&quot;李四&quot;</span>, <span class="hljs-string">&quot;男&quot;</span>, <span class="hljs-string">&quot;22&quot;</span>, <span class="hljs-string">&quot;北京&quot;</span>, <span class="hljs-string">&quot;医生&quot;</span>],<br>          [<span class="hljs-string">&quot;王五&quot;</span>, <span class="hljs-string">&quot;女&quot;</span>, <span class="hljs-string">&quot;33&quot;</span>, <span class="hljs-string">&quot;珠海&quot;</span>, <span class="hljs-string">&quot;出租车司机&quot;</span>],]<br> <br>value2 = [[<span class="hljs-string">&quot;Tom&quot;</span>, <span class="hljs-string">&quot;男&quot;</span>, <span class="hljs-string">&quot;21&quot;</span>, <span class="hljs-string">&quot;西安&quot;</span>, <span class="hljs-string">&quot;测试工程师&quot;</span>],<br>          [<span class="hljs-string">&quot;Jones&quot;</span>, <span class="hljs-string">&quot;女&quot;</span>, <span class="hljs-string">&quot;34&quot;</span>, <span class="hljs-string">&quot;上海&quot;</span>, <span class="hljs-string">&quot;产品经理&quot;</span>],<br>          [<span class="hljs-string">&quot;Cat&quot;</span>, <span class="hljs-string">&quot;女&quot;</span>, <span class="hljs-string">&quot;56&quot;</span>, <span class="hljs-string">&quot;上海&quot;</span>, <span class="hljs-string">&quot;教师&quot;</span>],]<br> <br> <br>write_excel_xls(book_name_xls, sheet_name_xls, value_title)<br>write_excel_xls_append(book_name_xls, value1)<br>write_excel_xls_append(book_name_xls, value2)<br>read_excel_xls(book_name_xls)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>实验计时器</title>
    <link href="/2023/11/18/%E5%AE%9E%E9%AA%8C%E8%AE%A1%E6%97%B6%E5%99%A8/"/>
    <url>/2023/11/18/%E5%AE%9E%E9%AA%8C%E8%AE%A1%E6%97%B6%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="程序计时"><a href="#程序计时" class="headerlink" title="程序计时"></a>程序计时</h1><h1 id="方式一（更精确）"><a href="#方式一（更精确）" class="headerlink" title="方式一（更精确）"></a>方式一（更精确）</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br>start = time.perf_counter()<br><br><span class="hljs-comment"># 代码块部分</span><br>a = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(a))<br>    a[i]=a[i]*i<br><br>end = time.perf_counter()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;:.16f&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(end-start),<span class="hljs-string">&#x27;秒&#x27;</span>)<br></code></pre></td></tr></table></figure><h2 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br>start = time.time()<br><br><span class="hljs-comment"># 代码块部分</span><br><br><span class="hljs-built_in">print</span>(time.time()-start)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python命名规范</title>
    <link href="/2023/11/18/python%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83/"/>
    <url>/2023/11/18/python%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83/</url>
    
    <content type="html"><![CDATA[<h1 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h1><p>Google Python 命名规范</p><p>常用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">模块名写法: module_name ;<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">包名写法: package_name ;<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">类名: ClassName ;<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">方法名: method_name ;<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">异常名: ExceptionName ;<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">函数名: function_name ;<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">全局常量名: GLOBAL_CONSTANT_NAME ;<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">全局变量名: global_var_name ;<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">实例名: instance_var_name ;<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">函数参数名: function_parameter_name ;<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">局部变量名: local_var_name.函数名,变量名和文件名应该是描述性的,尽量避免缩写,特别要避免使用非项目人员不清楚难以理解的缩写,不要通过删除单词中的字母来进行缩写.始终使用.py作为文件后缀名,不要用破折号.<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>numpy</title>
    <link href="/2023/11/18/numpy/"/>
    <url>/2023/11/18/numpy/</url>
    
    <content type="html"><![CDATA[<h1 id="Numpy"><a href="#Numpy" class="headerlink" title="Numpy"></a>Numpy</h1><h1 id="ndarray-属性"><a href="#ndarray-属性" class="headerlink" title="ndarray 属性"></a>ndarray 属性</h1><p><code>shape</code>：返回一个元组，表示 array 的形状</p><p><code>ndim</code>：返回一个数字，表示 array 的维度的数目</p><p><code>size</code>：返回一个数字，表示 array 中所有数据元素的数目</p><p><code>dtype</code>：array 中的元素的数据类型</p><p><code>itemsize</code>：表示数组中每个元素的字节大小</p><h1 id="创建-array-的方法"><a href="#创建-array-的方法" class="headerlink" title="创建 array 的方法"></a>创建 array 的方法</h1><ul><li>从 Python 的列表 list 和嵌套列表创建 array</li><li>使用预定函数 arange、linspace 等创建等差数组</li><li>使用 ones、ones_like、zeros、zeros_like、empty、empty_like、full、full_like、eye 等函数创建</li><li>生成随机数的 np.random 模块创建</li></ul><h2 id="np-arange-start-stop-step-dtype"><a href="#np-arange-start-stop-step-dtype" class="headerlink" title="np.arange(start,stop,step,dtype)"></a><strong>np.arange(start,stop,step,dtype)</strong></h2><p>使用 <code>np.arange(start,stop,step,dtype)</code> 生成等差数组</p><ul><li>start 表示开始的数（包含） 默认从 0 开始</li><li>stop 表示结束的数（不包含）</li><li>step 指定步长 默认为 1</li><li>dtype 指定数据类型</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># _创建了一个从0到9的数组 不包含10  步长默认为1_</span><br>np.arrange(<span class="hljs-number">10</span>)<br><span class="hljs-comment">#array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">_<span class="hljs-comment"># [0,10)区间  左闭右开   指定步长为2_</span><br>np.arange(<span class="hljs-number">0</span>, <span class="hljs-number">10</span>, <span class="hljs-number">2</span>)<br><span class="hljs-comment"># array([0, 2, 4, 6, 8])</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">_<span class="hljs-comment"># reshape 可以改变数组的形状_</span><br>_<span class="hljs-comment"># 将一维数组 改成 2行5列的 2维数组_</span><br>np.arange(<span class="hljs-number">10</span>).reshape(<span class="hljs-number">2</span>,<span class="hljs-number">5</span>)<br><span class="hljs-comment"># array([[0, 1, 2, 3, 4], [5, 6, 7, 8, 9]])</span><br></code></pre></td></tr></table></figure><h2 id="np-linspace-start-stop-num-endpoint"><a href="#np-linspace-start-stop-num-endpoint" class="headerlink" title="np.linspace(start,stop,num,endpoint)** **"></a><strong>np.linspace(start,stop,num,endpoint)</strong>** **</h2><p>使用 np.linspace(start,stop,num,endpoint) 创建等差数组-指定数量</p><ul><li>start 起始值</li><li>stop 结束值</li><li>num 要生成的等间隔样例数量，默认为 50</li><li>endpoint 序列中是否包含 stop 值， 默认为 true</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">np.linspace(<span class="hljs-number">0</span>,<span class="hljs-number">10</span>)<br><span class="hljs-comment">#array([ 0. , 0.20408163, 0.40816327, 0.6122449 , 0.81632653, 1.02040816, 1.2244898 , 1.42857143, 1.63265306, 1.83673469, 2.04081633, 2.24489796, 2.44897959, 2.65306122, 2.85714286, 3.06122449, 3.26530612, 3.46938776, 3.67346939, 3.87755102, 4.08163265, 4.28571429, 4.48979592, 4.69387755, 4.89795918, 5.10204082, 5.30612245, 5.51020408, 5.71428571, 5.91836735, 6.12244898, 6.32653061, 6.53061224, 6.73469388, 6.93877551, 7.14285714, 7.34693878, 7.55102041, 7.75510204, 7.95918367, 8.16326531, 8.36734694, 8.57142857, 8.7755102 , 8.97959184, 9.18367347, 9.3877551 , 9.59183673, 9.79591837, 10. ])</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">np.linspace(<span class="hljs-number">0</span>, <span class="hljs-number">10</span>, <span class="hljs-number">5</span>)<br><span class="hljs-comment"># array([ 0. , 2.5, 5. , 7.5, 10. ])</span><br>np.linspace(<span class="hljs-number">0</span>,<span class="hljs-number">10</span>,<span class="hljs-number">5</span>,endpoint=<span class="hljs-literal">False</span>)<br><span class="hljs-comment"># array([0., 2., 4., 6., 8.])</span><br></code></pre></td></tr></table></figure><h2 id="ones、ones-like、zeros、zeros-like、empty、empty-like、full、full-like、eye"><a href="#ones、ones-like、zeros、zeros-like、empty、empty-like、full、full-like、eye" class="headerlink" title="ones、ones_like、zeros、zeros_like、empty、empty_like、full、full_like、eye"></a><strong>ones、ones_like、zeros、zeros_like、empty、empty_like、full、full_like、eye</strong></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">_<span class="hljs-comment"># 使用ones创建全是1的数组_</span><br>np.ones(<span class="hljs-number">10</span>)<br><span class="hljs-comment"># array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])</span><br>np.ones((<span class="hljs-number">2</span>, <span class="hljs-number">4</span>))<br><span class="hljs-comment"># array([[1., 1., 1., 1.], [1., 1., 1., 1.]])</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">_<span class="hljs-comment"># 使用ones_like创建形状相同的数组_</span><br>x=np.arange(<span class="hljs-number">5</span>)<br>np.ones_like(x)<br><span class="hljs-comment"># array([1, 1, 1, 1, 1])</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># np.zeros()、np.zeros_like()同ones</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">_<span class="hljs-comment"># 使用empty创建未初始化的数组_</span><br>_<span class="hljs-comment"># 注意：数据是未初始化的，里面的值可能是随机值不要用_</span><br>np.empty(<span class="hljs-number">10</span>)<br><span class="hljs-comment"># array([            nan, 0.00000000e+000, 1.23162017e-311, 2.02369289e-320,</span><br><span class="hljs-comment">#       0.00000000e+000, 0.00000000e+000, 0.00000000e+000, 0.00000000e+000,</span><br><span class="hljs-comment">#      0.00000000e+000, 0.00000000e+000])</span><br>np.empty_like(x)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">_<span class="hljs-comment"># 使用full创建指定值的数组_</span><br>np.full(<span class="hljs-number">10</span>, <span class="hljs-number">35</span>)<br><span class="hljs-comment">#array([35, 35, 35, 35, 35, 35, 35, 35, 35, 35])</span><br>np.full_like(x)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">_<span class="hljs-comment"># 使用 eye 函数创建 对角线的地方为1，其余的地方为0._</span><br>np.eye(<span class="hljs-number">5</span>)<br><span class="hljs-comment">#array([[1., 0., 0., 0., 0.],</span><br><span class="hljs-comment">#       [0., 1., 0., 0., 0.],</span><br><span class="hljs-comment">#       [0., 0., 1., 0., 0.],</span><br><span class="hljs-comment">#       [0., 0., 0., 1., 0.],</span><br><span class="hljs-comment">#       [0., 0., 0., 0., 1.]])</span><br></code></pre></td></tr></table></figure><h2 id="np-random"><a href="#np-random" class="headerlink" title="np.random"></a><code>np.random</code></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 设置随机种子，作用是使得每次随机的结果固定</span><br>np.random.seed(<span class="hljs-number">100</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 返回数据在[0,1)之间，左闭右开</span><br>np.random.rand(<span class="hljs-number">5</span>)<br><span class="hljs-comment"># array([0.70043712, 0.84418664, 0.67651434, 0.72785806, 0.95145796])</span><br><span class="hljs-comment"># 随机生成2行5列的2维数组，数据在[0,1)之间</span><br>np.random.rand(<span class="hljs-number">2</span>,<span class="hljs-number">5</span>)<br><span class="hljs-comment"># array([[0.0127032 , 0.4135877 , 0.04881279, 0.09992856, 0.50806631], [0.20024754, 0.74415417, 0.192892 , 0.70084475, 0.29322811]])</span><br>_<span class="hljs-comment"># 生成随机整数  区间范围：[2,5) 左闭右开  包含2不包含5_</span><br>np.random.randint(<span class="hljs-number">2</span>,<span class="hljs-number">5</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">_<span class="hljs-comment"># 指定shape,前两位表示取值范围，左闭右开，第三个参数表示shape，长度_</span><br>np.random.randint(<span class="hljs-number">2</span>,<span class="hljs-number">5</span>,<span class="hljs-number">5</span>)<br><span class="hljs-comment"># array([2, 2, 4, 2, 2])</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">_<span class="hljs-comment">#uniform() 在 [low,high) 之间 生成均匀分布的数字_</span><br>np.random.uniform(<span class="hljs-number">2</span>,<span class="hljs-number">5</span>,<span class="hljs-number">4</span>)<br><span class="hljs-comment"># array([2.09469406, 4.51089172, 2.88254137, 2.20636031])</span><br>np.random.uniform(<span class="hljs-number">2</span>,<span class="hljs-number">5</span>,(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>))<br><span class="hljs-comment"># array([[3.58969008, 3.82705545, 3.41092036],</span><br><span class="hljs-comment">#       [2.89800039, 2.96823952, 3.03827621]])</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">_<span class="hljs-comment"># randn  返回数据具有标准正态分布 # 即：均值为0 方差为1_</span><br>np.random.randn(<span class="hljs-number">5</span>)<br><span class="hljs-comment"># array([ 0.08879087, -0.46210034,  0.81213128, -0.86038511,  0.77408907])</span><br>np.random.randn(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>)<br><span class="hljs-comment"># array([[-1.32394829,  0.26291796,  1.42771125],</span><br><span class="hljs-comment">#        [ 0.66524811, -1.50827076,  2.24070462]])</span><br><br>_<span class="hljs-comment"># normal()  可以指定均值和标准差差,第一、二个参数表示均值和标准差，_</span><br>_<span class="hljs-comment"># 第三个参数表示shape_</span><br>np.random.normal(<span class="hljs-number">1</span>,<span class="hljs-number">10</span>,<span class="hljs-number">5</span>)<br>np.random.normal(<span class="hljs-number">1</span>,<span class="hljs-number">10</span>,(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>))<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># choice 从给定的数组里，生成随机结果</span><br>np.random.choice(<span class="hljs-number">5</span>,<span class="hljs-number">3</span>)<br><span class="hljs-comment"># array([3, 1, 4])</span><br><span class="hljs-comment"># 等同于 np.random.choice(0,5,3)  在[0,5)的区间范围内，生成三个数据</span><br>np.random.choice(<span class="hljs-number">5</span>,(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>))<br><span class="hljs-comment"># array([[2, 2, 0],</span><br><span class="hljs-comment">#        [4, 2, 2]])</span><br>np.random.choice([<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>], <span class="hljs-number">3</span>)<br><span class="hljs-comment"># array([3, 3, 5])</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python">_<span class="hljs-comment"># shuffle 把一个数组进行随机排列_</span><br>a = np.arange(<span class="hljs-number">10</span>)np.random.shuffle(a) <br>a<br><span class="hljs-comment"># array([9, 5, 4, 1, 6, 2, 3, 0, 8, 7])</span><br><br>a = np.arange(<span class="hljs-number">20</span>).reshape(<span class="hljs-number">4</span>, <span class="hljs-number">5</span>)<br>a<br><span class="hljs-comment"># array([[ 0,  1,  2,  3,  4],</span><br><span class="hljs-comment">#        [ 5,  6,  7,  8,  9],</span><br><span class="hljs-comment">#        [10, 11, 12, 13, 14],</span><br><span class="hljs-comment">#        [15, 16, 17, 18, 19]])</span><br><br>_<span class="hljs-comment"># 如果数组是多维的  则只会在第一维度打散数据_</span><br>np.random.shuffle(a)<br>a<br><span class="hljs-comment"># array([[10, 11, 12, 13, 14], [15, 16, 17, 18, 19], [ 5, 6, 7, 8, 9], [ 0, 1, 2, 3, 4]])</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python">_<span class="hljs-comment"># permutation 把一个数组进行随机排列  或者数字的全排列_</span><br>np.random.permutation(<span class="hljs-number">10</span>)<br><span class="hljs-comment"># array([4, 9, 8, 7, 3, 5, 6, 1, 0, 2])</span><br><br>arr = np.arange(<span class="hljs-number">9</span>).reshape((<span class="hljs-number">3</span>,<span class="hljs-number">3</span>))<br>arr<br><span class="hljs-comment"># array([[0, 1, 2], [3, 4, 5], [6, 7, 8]])</span><br><br>_<span class="hljs-comment"># permutation 与 shuffle 函数功能相同  区别在于：_</span><br>_<span class="hljs-comment"># 注意 __permutation不会更改原来的arr 会返回一个新的copy_</span><br>np.random.permutation(arr)<br><span class="hljs-comment"># array([[3, 4, 5], [6, 7, 8], [0, 1, 2]])</span><br>arr<br><span class="hljs-comment"># array([[0, 1, 2], [3, 4, 5], [6, 7, 8]])</span><br></code></pre></td></tr></table></figure><h1 id="numpy-索引"><a href="#numpy-索引" class="headerlink" title="numpy 索引"></a>numpy 索引</h1><h2 id="基础索引"><a href="#基础索引" class="headerlink" title="基础索引"></a>基础索引</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">_<span class="hljs-comment"># 一维向量_</span><br>x = np.arange(<span class="hljs-number">10</span>)<br>x<br><span class="hljs-comment"># array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">_<span class="hljs-comment"># 二维向量 一般用大写字母_</span><br>Y = np.arange(<span class="hljs-number">20</span>).reshape(<span class="hljs-number">4</span>, <span class="hljs-number">5</span>)<br>Y<br><span class="hljs-comment"># array([[ 0, 1, 2, 3, 4], [ 5, 6, 7, 8, 9], [10, 11, 12, 13, 14],</span><br><span class="hljs-comment">#        [15, 16, 17, 18,19]])</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">_<span class="hljs-comment"># 取索引从‘2’到‘倒数第一 个’(不包含倒数第一个)_(左闭右开)</span><br>x[<span class="hljs-number">2</span>:-<span class="hljs-number">1</span>]<br><span class="hljs-comment"># array([2, 3, 4, 5, 6, 7, 8])</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">_<span class="hljs-comment"># 取 第1行第1列的数 _</span><br>Y[<span class="hljs-number">0</span>, <span class="hljs-number">0</span>]<br><span class="hljs-comment"># 0</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">_<span class="hljs-comment"># 取索引为第2行的数据_</span><br>Y[<span class="hljs-number">2</span>]<br><span class="hljs-comment"># array([10, 11, 12, 13, 14])</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">_<span class="hljs-comment"># 取索引为第2列的数据_</span><br>Y[:,<span class="hljs-number">2</span>]<br><span class="hljs-comment"># array([ 2, 7, 12, 17])</span><br></code></pre></td></tr></table></figure><h2 id="神奇索引"><a href="#神奇索引" class="headerlink" title="神奇索引"></a>神奇索引</h2><p>就是用整数数组进行的索引</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">x = np.arange(<span class="hljs-number">10</span>)<br>x<br><span class="hljs-comment"># array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">x[[<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]]<br><span class="hljs-comment"># array([2, 3, 4])</span><br><br>index = np.array([[<span class="hljs-number">0</span>,<span class="hljs-number">2</span>],[<span class="hljs-number">1</span>,<span class="hljs-number">3</span>]])<br>x[index]<br><span class="hljs-comment"># array([[0, 2], [1, 3]])</span><br></code></pre></td></tr></table></figure><h3 id="获取数组中最大的前-n-个数字"><a href="#获取数组中最大的前-n-个数字" class="headerlink" title="获取数组中最大的前 n 个数字"></a>获取数组中最大的前 n 个数字</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 随机生成1-100之间的10个数字</span><br>arr = np.random.randint(<span class="hljs-number">1</span>, <span class="hljs-number">100</span>, <span class="hljs-number">10</span>)<br>arr<br><span class="hljs-comment"># array([37, 30, 76, 20, 63, 80, 42, 83, 91, 67])</span><br><br><span class="hljs-comment"># arr.argsort() 会返回排序后的索引index，好像都是从小到大排序</span><br><span class="hljs-comment"># 取最大值对应的3个下标</span><br>arr.argsort()[-<span class="hljs-number">3</span>:]<br><span class="hljs-comment"># array([5, 7, 8], dtype=int64)</span><br><br>arr[arr.argsort()[-<span class="hljs-number">3</span>:]]<br><span class="hljs-comment"># array([80, 83, 91])</span><br></code></pre></td></tr></table></figure><h3 id="二维数组举例"><a href="#二维数组举例" class="headerlink" title="二维数组举例"></a>二维数组举例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python">Y = np.arange(<span class="hljs-number">20</span>).reshape(<span class="hljs-number">4</span>, <span class="hljs-number">5</span>)<br>Y<br><span class="hljs-comment"># array([[ 0, 1, 2, 3, 4], [ 5, 6, 7, 8, 9], </span><br><span class="hljs-comment">#        [10, 11, 12, 13, 14], [15, 16, 17, 18, 19]])</span><br><br><span class="hljs-comment"># 筛选多行 列可以省略，默认第一个维度，就是行</span><br>Y[[<span class="hljs-number">0</span>,<span class="hljs-number">2</span>]]<br><span class="hljs-comment"># array([[ 0, 1, 2, 3, 4], [10, 11, 12, 13, 14]])</span><br><br>Y[[<span class="hljs-number">0</span>,<span class="hljs-number">2</span>],:]<br><span class="hljs-comment"># array([[ 0, 1, 2, 3, 4], [10, 11, 12, 13, 14]])</span><br><br><span class="hljs-comment"># 筛选多列 行不能省略</span><br>Y[:,[<span class="hljs-number">0</span>, <span class="hljs-number">2</span>]]<br><span class="hljs-comment">#array([[ 0, 2], [ 5, 7], [10, 12], [15, 17]])</span><br><br><span class="hljs-comment"># 同时指定行列</span><br>Y[[<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>],[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]]<br><span class="hljs-comment"># array([ 1, 12, 18])</span><br></code></pre></td></tr></table></figure><h2 id="布尔索引"><a href="#布尔索引" class="headerlink" title="布尔索引"></a>布尔索引</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">x = np.arange(<span class="hljs-number">10</span>)<br>x<br><span class="hljs-comment"># array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])</span><br><br><span class="hljs-comment"># 返回bool值的数组</span><br>x&gt;<span class="hljs-number">5</span><br><span class="hljs-comment"># array([False, False, False, False, False, False, </span><br><span class="hljs-comment">#       True, True, True, True])</span><br><br>x[x&gt;<span class="hljs-number">5</span>]<br><span class="hljs-comment"># array([6, 7, 8, 9])</span><br></code></pre></td></tr></table></figure><p>通过条件进行赋值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python">x[x&lt;=<span class="hljs-number">5</span>] = <span class="hljs-number">0</span><br>x[x&gt;<span class="hljs-number">5</span>] = <span class="hljs-number">1</span><br>x<br><span class="hljs-comment"># array([0, 0, 0, 0, 0, 0, 1, 1, 1, 1])</span><br><br>x = np.arange(<span class="hljs-number">10</span>)<br>x[x&lt;<span class="hljs-number">5</span>] += <span class="hljs-number">20</span><br>x<br><span class="hljs-comment"># array([20, 21, 22, 23, 24, 5, 6, 7, 8, 9])</span><br><br>Y = np.arange(<span class="hljs-number">20</span>).reshape(<span class="hljs-number">4</span>, <span class="hljs-number">5</span>)<br>Y &gt; <span class="hljs-number">5</span><br><span class="hljs-comment"># array([[False, False, False, False, False], </span><br><span class="hljs-comment">#        [False, True, True, True, True], </span><br><span class="hljs-comment">#        [ True, True, True, True, True], </span><br><span class="hljs-comment">#        [ True, True, True, True, True]])</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">_<span class="hljs-comment"># Y&gt;5的boolean数组 既有行又有列 因此返回的是 行列一维数组_</span><br>Y[Y&gt;<span class="hljs-number">5</span>]<br><span class="hljs-comment"># array([ 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">Y[:,<span class="hljs-number">3</span>]<br><span class="hljs-comment"># array([ 3, 8, 13, 18])</span><br><br>Y[:, <span class="hljs-number">3</span>]&gt;<span class="hljs-number">5</span><br><span class="hljs-comment"># array([False, True, True, True])</span><br><br><span class="hljs-comment"># 把第3列大于5的行数据筛选出来</span><br>Y[:, <span class="hljs-number">3</span>][Y[:, <span class="hljs-number">3</span>]&gt;<span class="hljs-number">5</span>]<br><span class="hljs-comment"># array([ 8, 13, 18])</span><br></code></pre></td></tr></table></figure><h3 id="条件的组合"><a href="#条件的组合" class="headerlink" title="条件的组合"></a>条件的组合</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">x = np.arange(<span class="hljs-number">10</span>)<br>x<br><span class="hljs-comment"># array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])</span><br><br>condition = (x%<span class="hljs-number">2</span>==<span class="hljs-number">0</span>)| (x&gt;<span class="hljs-number">7</span>)<br>condition<br><span class="hljs-comment"># array([ True, False, True, False, True, </span><br><span class="hljs-comment">#         False, True, False, True, True])</span><br><br>x[condition]<br><span class="hljs-comment"># array([0, 2, 4, 6, 8, 9])</span><br></code></pre></td></tr></table></figure><h1 id="Numpy-的操作与函数"><a href="#Numpy-的操作与函数" class="headerlink" title="Numpy 的操作与函数"></a>Numpy 的操作与函数</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python">A  = np.arange(<span class="hljs-number">6</span>).reshape(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>)<br>A<br><span class="hljs-comment"># array([[0, 1, 2], [3, 4, 5]])</span><br><br><span class="hljs-comment"># 相当于 A中的每个数据都+1</span><br>A+<span class="hljs-number">1</span><br><span class="hljs-comment"># array([[1, 2, 3], [4, 5, 6]])</span><br><br><span class="hljs-comment"># 相当于 A中的每个数据都*3</span><br>A*<span class="hljs-number">3</span><br><span class="hljs-comment"># array([[ 0, 3, 6], [ 9, 12, 15]])</span><br><br>np.sin(A)<br><span class="hljs-comment"># 单位是弧度</span><br><span class="hljs-comment"># array([[ 0. , 0.84147098, 0.90929743], </span><br><span class="hljs-comment">#        [ 0.14112001, -0.7568025 , -0.95892427]])</span><br><br>np.exp(A)<br><span class="hljs-comment">#array([[ 1. , 2.71828183, 7.3890561 ], </span><br><span class="hljs-comment">#     [ 20.08553692, 54.59815003, 148.4131591 ]])</span><br><br>B  = np.arange(<span class="hljs-number">6</span>,<span class="hljs-number">12</span>).reshape(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>)<br>B<br><span class="hljs-comment"># array([[ 6, 7, 8], [ 9, 10, 11]])</span><br><br><span class="hljs-comment"># 对应位置元素相加</span><br>A + B<br><span class="hljs-comment"># array([[ 6, 8, 10], [12, 14, 16]])</span><br><br><span class="hljs-comment"># 对应位置元素相减</span><br>A - B <br><span class="hljs-comment"># array([[-6, -6, -6], [-6, -6, -6]])</span><br><br><span class="hljs-comment"># 对应位置元素相乘</span><br>A*B<br><span class="hljs-comment"># array([[ 0, 7, 16], [27, 40, 55]])</span><br></code></pre></td></tr></table></figure><h2 id="numpy-的数学统计函数"><a href="#numpy-的数学统计函数" class="headerlink" title="numpy 的数学统计函数"></a>numpy 的数学统计函数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs python">arr = np.arange(<span class="hljs-number">12</span>).reshape(<span class="hljs-number">3</span>,<span class="hljs-number">4</span>)<br>arr<br><span class="hljs-comment"># array([[ 0, 1, 2, 3], [ 4, 5, 6, 7], [ 8, 9, 10, 11]])</span><br><br><span class="hljs-comment"># 求和</span><br>np.<span class="hljs-built_in">sum</span>(arr)<br><span class="hljs-comment"># 66</span><br><br><span class="hljs-comment"># 乘积</span><br>np.prod(arr)<br><span class="hljs-comment"># 0</span><br><br><span class="hljs-comment"># 累加</span><br>np.cumsum(arr)<br><span class="hljs-comment"># array([ 0, 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, 66], dtype=int32)</span><br><br><span class="hljs-comment"># 累乘</span><br>np.cumprod(arr)<br><span class="hljs-comment"># array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], dtype=int32)</span><br><br><span class="hljs-comment"># 最小值</span><br>np.<span class="hljs-built_in">min</span>(arr)<br><span class="hljs-comment"># 0</span><br><br><span class="hljs-comment"># 最大值</span><br>np.<span class="hljs-built_in">max</span>(arr)<br><span class="hljs-comment"># 11</span><br><br><span class="hljs-comment"># 求取数列第?分位的数值,50就是中位数</span><br>np.percentile(arr,[<span class="hljs-number">25</span>,<span class="hljs-number">50</span>,<span class="hljs-number">75</span>])<br><span class="hljs-comment"># array([2.75, 5.5 , 8.25])</span><br><br><span class="hljs-comment"># 功能同上面  只不过范围为0-1直接</span><br>np.quantile(arr,[<span class="hljs-number">0.25</span>,<span class="hljs-number">0.5</span>,<span class="hljs-number">0.75</span>])<br><span class="hljs-comment"># array([2.75, 5.5 , 8.25])</span><br><br><span class="hljs-comment">#中位数</span><br>np.median(arr)<br><span class="hljs-comment"># 5.5</span><br><br><span class="hljs-comment"># 平均值</span><br>np.mean(arr)<br><span class="hljs-comment"># 5.5</span><br><br><span class="hljs-comment"># 标准差</span><br>np.std(arr)<br><span class="hljs-comment"># 3.452052529534663</span><br><br><span class="hljs-comment"># 方差</span><br>np.var(arr)<br><span class="hljs-comment"># 11.916666666666666</span><br><br><span class="hljs-comment"># 加权平均</span><br><span class="hljs-comment"># weights 的 shape 需要和 arr 一样</span><br>weights = np.random.rand(*arr.shape)<br>np.average(arr, weights=weights)<br><span class="hljs-comment"># 5.355698948848374</span><br></code></pre></td></tr></table></figure><h1 id="numpy-的-axis-参数"><a href="#numpy-的-axis-参数" class="headerlink" title="numpy 的 axis 参数"></a><strong>numpy 的 axis 参数</strong></h1><p>axis&#x3D;0 代表行 axis&#x3D;1 代表列</p><p>对于 sum&#x2F;mean&#x2F;media 等聚合函数：</p><ul><li>axis&#x3D;0 代表把行消解掉，axis&#x3D;1 代表把列消解掉</li><li>axis&#x3D;0 代表跨行计算， axis&#x3D;1 代表跨列计算</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python">arr = np.arange(<span class="hljs-number">12</span>).reshape(<span class="hljs-number">3</span>,<span class="hljs-number">4</span>)<br>arr<br><span class="hljs-comment"># array([[ 0, 1, 2, 3], [ 4, 5, 6, 7], [ 8, 9, 10, 11]])</span><br><br>arr.<span class="hljs-built_in">sum</span>(axis=<span class="hljs-number">0</span>)<br><span class="hljs-comment"># array([12, 15, 18, 21])</span><br><br>arr.<span class="hljs-built_in">sum</span>(axis=<span class="hljs-number">1</span>)<br><span class="hljs-comment"># array([ 6, 22, 38])</span><br><br>arr.cumsum(axis=<span class="hljs-number">0</span>)<br><span class="hljs-comment"># array([[ 0, 1, 2, 3], [ 4, 6, 8, 10], [12, 15, 18, 21]], </span><br><span class="hljs-comment"># dtype=int32)</span><br><br>arr.cumsum(axis=<span class="hljs-number">1</span>)<br><span class="hljs-comment"># array([[ 0, 1, 3, 6], [ 4, 9, 15, 22], [ 8, 17, 27, 38]], </span><br><span class="hljs-comment"># dtype=int32)</span><br><br>mean = np.mean(arr, axis=<span class="hljs-number">0</span>)<br>mean<br><span class="hljs-comment"># array([4., 5., 6., 7.])</span><br><br>std = np.std(arr,axis=<span class="hljs-number">0</span>)<br>std<br><span class="hljs-comment"># array([3.26598632, 3.26598632, 3.26598632, 3.26598632])</span><br><br>result = arr-mean<br>result<br><span class="hljs-comment"># array([[-4., -4., -4., -4.], [ 0., 0., 0., 0.], </span><br><span class="hljs-comment">#        [ 4., 4., 4., 4.]])</span><br></code></pre></td></tr></table></figure><h1 id="numpy-给数组添加维度"><a href="#numpy-给数组添加维度" class="headerlink" title="numpy 给数组添加维度"></a><strong>numpy 给数组添加维度</strong></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">arr = np.arange(<span class="hljs-number">5</span>)<br>arr<br><span class="hljs-comment"># array([0, 1, 2, 3, 4])</span><br><br>arr.shape<br><span class="hljs-comment"># (5,)</span><br></code></pre></td></tr></table></figure><h2 id="方法-1"><a href="#方法-1" class="headerlink" title="方法 1"></a>方法 1</h2><p>np.newaxis</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python">np.newaxis 就是<span class="hljs-literal">None</span>的别名<br><br>np.newaxis <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span><br><span class="hljs-comment"># True</span><br><br>np.newaxis == <span class="hljs-literal">None</span><br><span class="hljs-comment"># True</span><br><br><span class="hljs-comment"># 给一维向量添加一个行维度</span><br>arr[np.newaxis, :]<br><span class="hljs-comment"># array([[0, 1, 2, 3, 4]])</span><br><br>arr[np.newaxis, :].shape<br><span class="hljs-comment"># (1, 5)</span><br><br><span class="hljs-comment"># 给一维向量添加一个列维度</span><br>arr[:, np.newaxis]<br><span class="hljs-comment"># array([[0], [1], [2], [3], [4]])</span><br><br>arr[:,np.newaxis].shape<br><span class="hljs-comment"># (5, 1)</span><br></code></pre></td></tr></table></figure><h2 id="方法-2"><a href="#方法-2" class="headerlink" title="方法 2"></a>方法 2</h2><p>np.expand_dims</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 给一维向量添加一个行维度</span><br>np.expand_dims(arr, axis=<span class="hljs-number">0</span>)<br><span class="hljs-comment"># array([[0, 1, 2, 3, 4]])</span><br><br>np.expand_dims(arr,axis=<span class="hljs-number">0</span>).shape<br><span class="hljs-comment"># (1, 5)</span><br><br><span class="hljs-comment"># 给一维向量添加一个列维度</span><br>np.expand_dims(arr,axis=<span class="hljs-number">1</span>)<br><span class="hljs-comment"># array([[0], [1], [2], [3], [4]])</span><br><br>np.expand_dims(arr,axis=<span class="hljs-number">1</span>).shape<br><span class="hljs-comment"># (5, 1)</span><br></code></pre></td></tr></table></figure><p>方法 3</p><p>np.reshape</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python">np.reshape(arr, (<span class="hljs-number">1</span>,<span class="hljs-number">5</span>))<br><span class="hljs-comment"># array([[0, 1, 2, 3, 4]])</span><br><br><span class="hljs-comment"># -1表示 自动计算出结果  </span><br>np.reshape(arr,(<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>))<br><span class="hljs-comment"># array([[0, 1, 2, 3, 4]])</span><br><br>np.reshape(arr,(<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>)).shape<br><span class="hljs-comment"># (1, 5)</span><br><br>np.reshape(arr,(-<span class="hljs-number">1</span>,<span class="hljs-number">1</span>))<br><span class="hljs-comment"># array([[0], [1], [2], [3], [4]])</span><br><br>np.reshape(arr,(-<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)).shape<br><span class="hljs-comment"># (5, 1)</span><br></code></pre></td></tr></table></figure><h1 id="数组合并操作"><a href="#数组合并操作" class="headerlink" title="数组合并操作"></a>数组合并操作</h1><h2 id="合并行"><a href="#合并行" class="headerlink" title="合并行"></a>合并行</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python">a = np.arange(<span class="hljs-number">6</span>).reshape(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>)<br>b = np.arange(<span class="hljs-number">6</span>,<span class="hljs-number">18</span>).reshape(<span class="hljs-number">4</span>,<span class="hljs-number">3</span>)<br>a<br><span class="hljs-comment"># array([[0, 1, 2], [3, 4, 5]])</span><br>b<br><span class="hljs-comment"># array([[ 6, 7, 8], [ 9, 10, 11], </span><br><span class="hljs-comment">#        [12, 13, 14], [15, 16, 17]])</span><br><br>np.concatenate([a,b])<span class="hljs-comment">#(axis=0)</span><br><span class="hljs-comment"># array([[ 0, 1, 2], [ 3, 4, 5], </span><br><span class="hljs-comment">#         [ 6, 7, 8], [ 9, 10, 11], </span><br><span class="hljs-comment">#         [12, 13, 14], [15, 16, 17]])</span><br><br>np.vstack([a,b])<br><span class="hljs-comment"># array([[ 0, 1, 2], [ 3, 4, 5], </span><br><span class="hljs-comment">#        [ 6, 7, 8], [ 9, 10, 11],</span><br><span class="hljs-comment">#        [12, 13, 14], [15, 16, 17]])</span><br><br>np.row_stack([a,b])<br><span class="hljs-comment"># array([[ 0, 1, 2], [ 3, 4, 5], </span><br><span class="hljs-comment">#        [ 6, 7, 8], [ 9, 10, 11], </span><br><span class="hljs-comment">#        [12, 13, 14], [15, 16, 17]])</span><br></code></pre></td></tr></table></figure><h2 id="合并列"><a href="#合并列" class="headerlink" title="合并列"></a>合并列</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python">a = np.arange(<span class="hljs-number">12</span>).reshape(<span class="hljs-number">3</span>,<span class="hljs-number">4</span>)<br>a<br><span class="hljs-comment"># array([[ 0, 1, 2, 3], [ 4, 5, 6, 7], [ 8, 9, 10, 11]])</span><br><br>b = np.arange(<span class="hljs-number">12</span>,<span class="hljs-number">18</span>).reshape(<span class="hljs-number">3</span>,<span class="hljs-number">2</span>)<br>b<br><span class="hljs-comment"># array([[12, 13], [14, 15], [16, 17]])</span><br><br>np.concatenate([a,b],axis=<span class="hljs-number">1</span>)<br><span class="hljs-comment"># array([[ 0, 1, 2, 3, 12, 13], [ 4, 5, 6, 7, 14, 15], </span><br><span class="hljs-comment">#        [ 8, 9, 10, 11, 16, 17]])</span><br><br>np.hstack([a,b])<br><span class="hljs-comment"># array([[ 0, 1, 2, 3, 12, 13], [ 4, 5, 6, 7, 14, 15], </span><br><span class="hljs-comment">#        [ 8, 9, 10, 11, 16, 17]])</span><br><br>np.column_stack([a,b])<br><span class="hljs-comment"># array([[ 0, 1, 2, 3, 12, 13], [ 4, 5, 6, 7, 14, 15], </span><br><span class="hljs-comment">#        [ 8, 9, 10, 11, 16, 17]])</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>快速搜索</title>
    <link href="/2018/08/10/hello-world/"/>
    <url>/2018/08/10/hello-world/</url>
    
    <content type="html"><![CDATA[<p>在处理大量文件和数据的时候，快速搜索工具可以帮助我们提高效率。以下是一些常用的快速搜索工具</p><ul><li><a href="https://www.voidtools.com/">Everything</a><blockquote><p>这是一款Windows上的搜索引擎软件，可以快速搜索本地磁盘文件。它占用内存小，搜索界面简单，搜索速度又快，而且完全免费，还能够基于文件名快速锁定文件和文件夹位置，搜索时也只需输入文件夹或文件的关键字。</p></blockquote></li><li><a href="https://www.listary.com/">Listary</a><blockquote><p>这是一个第三方文件搜索工具，搜索速度比Windows自带的搜索要快很多。安装完软件后，在任意场景下，连续敲击两下键盘的Ctrl键，Listary的文件搜索框就会出现。除了文件搜索功能，Listary还可以实现在特定网站中搜索关键词。</p></blockquote></li></ul><p>然而在日常应用中，遇到问题，我们往往需要借助搜索引擎来解决。那么，搜索引擎的快速搜索有什么技巧吗？</p><hr><h1 id="1-限定关键词"><a href="#1-限定关键词" class="headerlink" title="1. 限定关键词"></a>1. 限定关键词</h1><p>即不使用默认的模糊搜索，使用精确搜索。<br>在搜索词两边加上双引号””如</p><pre><code class="hljs">&quot;sth&quot;&quot;张三&quot;</code></pre><h1 id="2-限定标题"><a href="#2-限定标题" class="headerlink" title="2. 限定标题"></a>2. 限定标题</h1><p>要求网页的标题中包含搜索的关键词</p><pre><code class="hljs">intitle:sthintitle:&quot;张三&quot; </code></pre><h1 id="3-限定标题多个关键词"><a href="#3-限定标题多个关键词" class="headerlink" title="3. 限定标题多个关键词"></a>3. 限定标题多个关键词</h1><p>多个关键词都包含在网页标题中 </p><pre><code class="hljs">allintitle:sth1 sth2allintitle：张三 李四</code></pre><h1 id="4-限定（文章）内容关键词"><a href="#4-限定（文章）内容关键词" class="headerlink" title="4. 限定（文章）内容关键词"></a>4. 限定（文章）内容关键词</h1><p>要求网页的内容中包含搜索的关键词</p><pre><code class="hljs">intext:sthintext:&quot;池晨晨&quot; &quot;浙江大学&quot;</code></pre><h1 id="5-限定网址关键词"><a href="#5-限定网址关键词" class="headerlink" title="5. 限定网址关键词"></a>5. 限定网址关键词</h1><p>要求网页的网址中包含搜索的关键词</p><pre><code class="hljs">inurl:sthInurl: CCTV</code></pre><h1 id="6-限定网址来源"><a href="#6-限定网址来源" class="headerlink" title="6. 限定网址来源"></a>6. 限定网址来源</h1><p>要求搜索的网页来源中包含搜索的关键词</p><pre><code class="hljs">site: sthsite: zhihu.com//搜索的结果来源于知乎如：2024推荐免试 site:zju.edu.cn</code></pre><h1 id="7-限定图片尺寸"><a href="#7-限定图片尺寸" class="headerlink" title="7. 限定图片尺寸"></a>7. 限定图片尺寸</h1><p>要求搜索的图片尺寸中包含搜索的关键词</p><pre><code class="hljs">imagesize: 2560×1440</code></pre><h1 id="8-限定文件格式："><a href="#8-限定文件格式：" class="headerlink" title="8. 限定文件格式："></a>8. 限定文件格式：</h1><p>要求搜索的文件格式</p><pre><code class="hljs">filetype:pdf如了解某个行业的报告：母婴行业:2023 filetype:pdf</code></pre><h1 id="9-油管视频下载"><a href="#9-油管视频下载" class="headerlink" title="9. 油管视频下载"></a>9. 油管视频下载</h1><p>在www.和you之前加上9x<br>或者用saveTube</p><h1 id="10-chatGPT"><a href="#10-chatGPT" class="headerlink" title="10. chatGPT"></a>10. chatGPT</h1><h2 id="10-1-扮演专家角色"><a href="#10-1-扮演专家角色" class="headerlink" title="10.1 扮演专家角色"></a>10.1 扮演专家角色</h2><p>问：你是个有 20 年从业经验的世界 500 强的营销顾问，我现在开了个叫“蜜雪冰城”的评价奶茶店，请帮我想三个营销推广的主题</p><p>答：当然，作为一位有 20 年从业经验的营销专家，我非常高兴为你的奶茶店“雪冰城”设计三个营销推广主题。以下是针对不同消费者群体和市场环境的主题方案，</p><h2 id="10-2-告诉chatGPT自己的角色"><a href="#10-2-告诉chatGPT自己的角色" class="headerlink" title="10.2 告诉chatGPT自己的角色"></a>10.2 告诉chatGPT自己的角色</h2><p>问：我是个正在学习python的无其他代码经验的初学者，我希望对一个csv格式的用户调研数据进行分析，请告诉我应该使用哪些工具去辅助我进行分析</p><p>答：对于初学者而言， Python 已经为处理和分析 CSV 文件提供了很多实用的工具。特别是，pandas 库是非常受欢迎且功能强大的数据分析工具。我推荐以下步骤帮助你分析csv数据</p><h2 id="10-3-期望的回答长度"><a href="#10-3-期望的回答长度" class="headerlink" title="10.3 期望的回答长度"></a>10.3 期望的回答长度</h2><p>问：写一篇 800 字的向非物理与材料专业读者介绍超导材料发展历史的文章？</p><h2 id="10-4-一步步思考"><a href="#10-4-一步步思考" class="headerlink" title="10.4 一步步思考"></a>10.4 一步步思考</h2><p>问：一步步思考，解答以下问题：甲和乙两个乡村图书室共有 5000 本藏书，其中甲图书室的藏书比乙图书室多 3x 本。现从甲书室中取出 150 本书放入乙图书室后，甲图书室的藏书仍比乙图书室多本。问甲图书室原有图书多少本？</p><p>A. 2500</p><p>B. 2750</p><p>C. 2950</p><p>D. 3500</p><p>答：我们可以一步步地用代数来解答这个问题。设甲图书室的图书数员为a本，乙图书室的图书数员为b本。根据题意，我们可以建立以下方程组．</p><ol><li>a + b &#x3D; 5000a &#x3D; b + 3</li><li>a &#x3D; b + 3x</li></ol><h2 id="10-5-明确你的要求和目的"><a href="#10-5-明确你的要求和目的" class="headerlink" title="10.5 明确你的要求和目的"></a>10.5 明确你的要求和目的</h2><p>chatGPT并不一定能准确的猜出你的要求</p><h2 id="10-6-提供充分的背景信息"><a href="#10-6-提供充分的背景信息" class="headerlink" title="10.6 提供充分的背景信息"></a>10.6 提供充分的背景信息</h2><p>告诉它为什么这么做，面临的背景是什么</p><h2 id="10-7-始终结构化思考你的prompt"><a href="#10-7-始终结构化思考你的prompt" class="headerlink" title="10.7 始终结构化思考你的prompt"></a>10.7 始终结构化思考你的prompt</h2><table><thead><tr><th>名称</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td>指令词(lnstruction)</td><td>引导模型理解您所需任务或问题的词汇，帮助模型准确理解需求。</td><td>“简述”、”解释”、”翻译”、”总结”、”润色”写一篇文章”等。</td></tr><tr><td>输入 (lnput Data)</td><td>提供给模型的问题或具体内容，应清晰、完整以确保模型生成满意答案。</td><td>当需要总结时，提供的文本；当需要编写 SQL 代码时，提供的数据库表和字段信息。</td></tr><tr><td>背景 (Context) ·可选</td><td>与任务相关的其他信息，提供额外信息以帮助模型更好地理解需求。</td><td>同样是写关于量子计算的科普文章，是写给小学生还是物理专业大学生，得到的内容会完全不同。</td></tr><tr><td>输出要求 (Outputindicator) ·可选</td><td>对模型生成答案的格式、长度等方面的限制。</td><td>“用 50 字以内简述”、”请按以下格式回答： 1.材料… 2.步骤一… 3．步骤二”等。</td></tr></tbody></table>]]></content>
    
    
    
    <tags>
      
      <tag>高效技能</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
