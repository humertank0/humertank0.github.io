<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>gpt论文润色专版</title>
    <link href="/2024/04/11/gpt%E8%AE%BA%E6%96%87%E6%B6%A6%E8%89%B2%E4%B8%93%E7%89%88/"/>
    <url>/2024/04/11/gpt%E8%AE%BA%E6%96%87%E6%B6%A6%E8%89%B2%E4%B8%93%E7%89%88/</url>
    
    <content type="html"><![CDATA[<h1 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h1><p>gpt帮忙润色中文论文时，直接输入指令“润色并降重：”效果一般，一方面是句子的润色程度不够，一方面是输出结果使用起来不方便，一大段修改后的文字还需要与论文一一比对。</p><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><h2 id="中文论文润色提示词"><a href="#中文论文润色提示词" class="headerlink" title="中文论文润色提示词"></a>中文论文润色提示词</h2><p>以下是一篇学术论文中的一段话。打磨文字以符合学术风格，提高拼写、语法、清晰度、简洁性和整体可读性。必要时重写整个句子。此外，在markdown表格中列出所有修改并解释修改的原因：</p><h2 id="英文论文润色提示词"><a href="#英文论文润色提示词" class="headerlink" title="英文论文润色提示词"></a>英文论文润色提示词</h2><p>Below is a paragraph from an academic paper. Polish the writing to meet the academic style, improve the spelling, grammar, clarity, concision and overall readability. When necessary, rewrite the whole sentence. Furthermore list all modification and explain the reasons to do so in markdown table : </p><h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><p>通过这种方式生成的回复会显示为markdown格式，分为三栏，gpt会对修改的句子专门标记出来，并给出修改的理由。</p>]]></content>
    
    
    
    <tags>
      
      <tag>GPT</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>虚析构函数</title>
    <link href="/2023/12/09/%E8%99%9A%E6%9E%90%E6%9E%84%E5%87%BD%E6%95%B0/"/>
    <url>/2023/12/09/%E8%99%9A%E6%9E%90%E6%9E%84%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<p>今天在写类的时候，遇到了内存泄露问题，原因是没有写虚析构函数，导致内存无法释放。</p><p>虚析构函数是一个在 C++ 中的重要概念，用于正确地释放多态类对象的资源。虚析构函数通常在基类中声明，并在继承类中进行实现。当通过基类指针或引用删除一个派生类对象时，使用虚析构函数可以确保正确调用派生类的析构函数，从而释放所有相关资源。</p><p>具体实现如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Base</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Base</span>()<br>    &#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;Construct Base.\n&quot;</span>;<br>    &#125;;<br>    ~<span class="hljs-built_in">Base</span>()<br>    &#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;Destruct Base.\n&quot;</span>;<br>    &#125;;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Derived</span>:<span class="hljs-keyword">public</span> Base<br>&#123;<br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">int</span>* a = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[<span class="hljs-number">50</span>];<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Derived</span>()<br>    &#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;Construct Derived.\n&quot;</span>;<br>    &#125;;<br>    ~<span class="hljs-built_in">Derived</span>()<br>    &#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;Destruct Derived.\n&quot;</span>;<br>    &#125;;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;Base class: \n&quot;</span>;<br>    Base* base = <span class="hljs-keyword">new</span> Base;<br>    <span class="hljs-keyword">delete</span> base;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br><br>    std::cout &lt;&lt; <span class="hljs-string">&quot;Derived class: \n&quot;</span>;<br>    Derived* derived = <span class="hljs-keyword">new</span> Derived;<br>    <span class="hljs-keyword">delete</span> derived;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br><br>    std::cout &lt;&lt; <span class="hljs-string">&quot;ploy: \n&quot;</span>;<br>    Base* ploy = <span class="hljs-keyword">new</span> Derived;<br>    <span class="hljs-keyword">delete</span> ploy;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>创建了一个基类<strong>Base</strong>和一个派生类<strong>Derived</strong>，其中<strong>Derived</strong>类中定义了一个动态数组，并在构造函数中对其进行初始化。(该数组占用的内存空间较大)<br>首先是分别创建了基类和派生类的对象，然后分别通过基类指针和派生类指针进行删除，都能正常释放内存。<br>但是对ploy指针进行删除时，由于没有实现虚析构函数，导致内存无法释放。<br>内存中残留着动态数组，导致内存泄露。<br>结果如下：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cmd">Base class:<br>Construct Base.<br>Destruct Base.<br><br>Derived class:<br>Construct Base.<br>Construct Derived.<br>Destruct Derived.<br>Destruct Base.<br><span class="hljs-function"></span><br><span class="hljs-function">ploy:</span><br><span class="hljs-function"><span class="hljs-title">Construct</span> <span class="hljs-title">Base</span>.</span><br><span class="hljs-function"><span class="hljs-title">Construct</span> <span class="hljs-title">Derived</span>.</span><br><span class="hljs-function"><span class="hljs-title">Destruct</span> <span class="hljs-title">Base</span>.</span><br></code></pre></td></tr></table></figure><p>如果要彻底修复这个错误，需要把Base类的析构函数改成虚析构函数，除此之外，为了更好的可读性，在派生类<strong>Derived</strong>中，最好也把析构函数加上<strong>override</strong>关键词。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Base</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Base</span>()<br>    &#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;Construct Base.\n&quot;</span>;<br>    &#125;;<br>    <span class="hljs-keyword">virtual</span> ~<span class="hljs-built_in">Base</span>()<span class="hljs-comment">//声明为虚析构函数</span><br>    &#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;Destruct Base.\n&quot;</span>;<br>    &#125;;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Derived</span>:<span class="hljs-keyword">public</span> Base<br>&#123;<br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">int</span>* a = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[<span class="hljs-number">50</span>];<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Derived</span>()<br>    &#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;Construct Derived.\n&quot;</span>;<br>    &#125;;<br>    ~<span class="hljs-built_in">Derived</span>() <span class="hljs-keyword">override</span><span class="hljs-comment">//加上override</span><br>    &#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;Destruct Derived.\n&quot;</span>;<br>    &#125;;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;Base class: \n&quot;</span>;<br>    Base* base = <span class="hljs-keyword">new</span> Base;<br>    <span class="hljs-keyword">delete</span> base;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br><br>    std::cout &lt;&lt; <span class="hljs-string">&quot;Derived class: \n&quot;</span>;<br>    Derived* derived = <span class="hljs-keyword">new</span> Derived;<br>    <span class="hljs-keyword">delete</span> derived;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br><br>    std::cout &lt;&lt; <span class="hljs-string">&quot;ploy: \n&quot;</span>;<br>    Base* ploy = <span class="hljs-keyword">new</span> Derived;<br>    <span class="hljs-keyword">delete</span> ploy;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>c++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vector使用优化</title>
    <link href="/2023/12/05/vector%E4%BD%BF%E7%94%A8%E4%BC%98%E5%8C%96/"/>
    <url>/2023/12/05/vector%E4%BD%BF%E7%94%A8%E4%BC%98%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<p><code>std::vector</code> 是 C++ 标准库中的一个动态数组容器，提供了动态大小的数组，并支持在数组的末尾高效地添加和删除元素。<code>std::vector</code> 是一个非常常用的容器，它的特性包括：</p><ol><li><strong>动态大小：</strong> <code>std::vector</code> 内部使用动态内存分配，可以根据需要自动调整容器的大小，避免了静态数组大小固定的限制。</li><li><strong>连续内存：</strong> <code>std::vector</code> 中的元素在内存中是连续存储的，这使得对元素的访问和迭代效率较高。</li><li><strong>随机访问：</strong> 支持通过下标或迭代器对元素进行随机访问。通过 <code>at()</code> 或 <code>operator[]</code> 可以访问指定位置的元素。</li><li><strong>尾部插入和删除：</strong> 提供了 <code>push_back()</code> 和 <code>pop_back()</code> 方法，可以在尾部高效地添加和删除元素。</li><li><strong>动态内存管理：</strong> <code>std::vector</code> 会自动管理内存的分配和释放，不需要手动处理内存分配问题。</li><li><strong>大小和容量：</strong> 提供 <code>size()</code> 方法获取当前元素个数，提供 <code>capacity()</code> 方法获取当前容器的容量。</li></ol><h3 id="通常的使用情况是这样"><a href="#通常的使用情况是这样" class="headerlink" title="通常的使用情况是这样"></a>通常的使用情况是这样</h3><p>创建一个vector，开始push_back元素，对vector进行调整。如果vector的容量较小，在添加新的元素的时候，vector会进行扩容。将vector内的元素复制一遍，添加到新的大容量的vector中，然后释放旧的vector所占用的内存。</p><p>如果预分配的容量用完，当我们puch_back一个新的元素时，vector就会重新分配，涉及到内存的再分配和清除，这样无疑拖慢了代码速度。</p><p>举例说明：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Vector</span><br>&#123;<br>    <span class="hljs-type">float</span> x, y, z;<br><br>    <span class="hljs-built_in">Vector</span>(<span class="hljs-type">float</span> a, <span class="hljs-type">float</span> b, <span class="hljs-type">float</span> c) :<br>        <span class="hljs-built_in">x</span>(a), <span class="hljs-built_in">y</span>(b), <span class="hljs-built_in">z</span>(c) <br>    &#123;<br>    &#125;<br><br>    <span class="hljs-built_in">Vector</span>(<span class="hljs-type">const</span> Vector&amp; other) :<br>        <span class="hljs-built_in">x</span>(other.x),<span class="hljs-built_in">y</span>(other.y),<span class="hljs-built_in">z</span>(other.z)<br>    &#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;Copy operation!&quot;</span> &lt;&lt; std::endl;<br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>    std::vector&lt;Vector&gt; vec;<br>    vec.<span class="hljs-built_in">push_back</span>(&#123; <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span> &#125;);<br>    vec.<span class="hljs-built_in">push_back</span>(&#123; <span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span> &#125;);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>在上述程序中，我们修改了默认的拷贝构造函数，当vector中的元素进行拷贝后，会输出”Copy operation!”。输出结果如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">Copy operation!<br>Copy operation!<br>Copy operation!<br><br>D:\Code Learning\cpp\practice\practice\x64\Debug\practice.exe (进程 37752)已退出，代码为 0。<br>要在调试停止时自动关闭控制台，请启用“工具”-&gt;“选项”-&gt;“调试”-&gt;“调试停止时自动关闭控制台”。<br>按任意键关闭此窗口. . .<br></code></pre></td></tr></table></figure><p>可以看到执行了三次拷贝操作。首先是{1，2，3}的元素从main栈中拷贝到实际的vector中，然后是第二个元素{4，5，6}从main栈中拷贝到实际的vector中，执行了第二次拷贝操作。由于vector进行扩容操作，又拷贝了第一个元素{1，2，3}，因此总共执行了三次拷贝操作。</p><h3 id="这其中存在的问题："><a href="#这其中存在的问题：" class="headerlink" title="这其中存在的问题："></a>这其中存在的问题：</h3><p>当插入一个元素时，扩容会消耗一定时间。当从空集开始，连续插入几个元素时，vector会进行频繁扩容。因此，如果能够在进行一系列插入操作之前先预先扩容或者安排好插入的空间，会节省一些时间。<strong>因此，第一个改进方向就是在已知插入元素数量的情况下，预先分配好空间。</strong></p><p>首先说明下改进前的版本：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Vector</span><br>&#123;<br>    <span class="hljs-type">float</span> x, y, z;<br><br>    <span class="hljs-built_in">Vector</span>(<span class="hljs-type">float</span> a, <span class="hljs-type">float</span> b, <span class="hljs-type">float</span> c) :<br>        <span class="hljs-built_in">x</span>(a), <span class="hljs-built_in">y</span>(b), <span class="hljs-built_in">z</span>(c) &#123;<br><br>    &#125;<br><br>    <span class="hljs-built_in">Vector</span>(<span class="hljs-type">const</span> Vector&amp; other) :<br>        <span class="hljs-built_in">x</span>(other.x),<span class="hljs-built_in">y</span>(other.y),<span class="hljs-built_in">z</span>(other.z)<br>    &#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;Copy operation!&quot;</span> &lt;&lt; std::endl;<br>    &#125;<br>&#125;;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>    std::vector&lt;Vector&gt; vec;<br>    vec.<span class="hljs-built_in">push_back</span>(Vector&#123; <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span> &#125;);<br>    vec.<span class="hljs-built_in">push_back</span>(Vector&#123; <span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span> &#125;);<br>    vec.<span class="hljs-built_in">push_back</span>(Vector&#123; <span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span> &#125;);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>在上述情况下，会发生6次拷贝操作。</p><p>当我们预先分配3个空间后：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>    std::vector&lt;Vector&gt; vec;<br>    vec.<span class="hljs-built_in">reserve</span>(<span class="hljs-number">3</span>);<span class="hljs-comment">//提前分配</span><br>    vec.<span class="hljs-built_in">push_back</span>(Vector&#123; <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span> &#125;);<br>    vec.<span class="hljs-built_in">push_back</span>(Vector&#123; <span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span> &#125;);<br>    vec.<span class="hljs-built_in">push_back</span>(Vector&#123; <span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span> &#125;);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>只会发生3次拷贝操作。</p><p>除此之外，若是不调用默认的拷贝构造函数，则会节省更多的时间开销。<strong>因此，第二个改进就是传递参数构造，不使用拷贝构造函数。</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>    std::vector&lt;Vector&gt; vec;<br>    vec.<span class="hljs-built_in">reserve</span>(<span class="hljs-number">3</span>);<br>    vec.<span class="hljs-built_in">emplace_back</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>);<br>    vec.<span class="hljs-built_in">emplace_back</span>(<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>);<br>    vec.<span class="hljs-built_in">emplace_back</span>(<span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure><p>若使用<strong>emplace_back</strong>，则最终的拷贝操作次数为0。</p>]]></content>
    
    
    
    <tags>
      
      <tag>c++</tag>
      
      <tag>优化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>指针运算符</title>
    <link href="/2023/12/04/%E6%8C%87%E9%92%88%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    <url>/2023/12/04/%E6%8C%87%E9%92%88%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
    
    <content type="html"><![CDATA[<p>在 C++ 中，<code>-&gt;</code> 运算符通常用于访问类对象的成员，特别是当对象是指针时。它是一个成员访问运算符，用于通过指针访问对象的成员。</p><p>首先介绍基本用法：</p><h3 id="对象指针的-运算符："><a href="#对象指针的-运算符：" class="headerlink" title="对象指针的 -&gt; 运算符："></a>对象指针的 <code>-&gt;</code> 运算符：</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyClass</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">display</span><span class="hljs-params">()</span> </span>&#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;Hello, World!&quot;</span> &lt;&lt; std::endl;<br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    MyClass obj;<br>    MyClass* ptr = &amp;obj;<br><br>    <span class="hljs-comment">// 使用对象指针的 -&gt; 运算符访问成员函数</span><br>    ptr-&gt;<span class="hljs-built_in">display</span>();  <span class="hljs-comment">// 等同于 (*ptr).display()</span><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>在上述例子中，<code>ptr</code> 是一个指向 <code>MyClass</code> 对象的指针，通过 <code>ptr-&gt;display()</code> 访问了对象的 <code>display</code> 成员函数。这样的语法更为简洁，等同于 <code>(*ptr).display()</code>。</p><p>接下来是高级用法：</p><p>-&gt;运算符也可以用来计算特定的偏移量，可应用于图形编程、游戏引擎之类的。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Vector</span><br>&#123;<br>    <span class="hljs-type">float</span> x, z, y;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>    <span class="hljs-type">int</span> offset = (<span class="hljs-type">int</span>)&amp;((Vector*)<span class="hljs-number">0</span>)-&gt;z;<br>    std::cout &lt;&lt; offset &lt;&lt; std::endl;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出结果为4.</p>]]></content>
    
    
    
    <tags>
      
      <tag>c++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>作用域指针</title>
    <link href="/2023/12/03/%E4%BD%9C%E7%94%A8%E5%9F%9F%E6%8C%87%E9%92%88/"/>
    <url>/2023/12/03/%E4%BD%9C%E7%94%A8%E5%9F%9F%E6%8C%87%E9%92%88/</url>
    
    <content type="html"><![CDATA[<p>有些时候，我们希望通过堆分配的指针可以被自动释放，而不是手动<strong>delete</strong>,这种时候，有一种方法就是使用<strong>作用域指针</strong>。</p><p><strong>作用域指针</strong>，本质上是一个类。是一个指针的包装器，在构造时分配指针，在析构时删除指针。我们可以自动化<strong>new</strong>和<strong>delete</strong>关键字。</p><h3 id="首先来演示一下手动管理的指针："><a href="#首先来演示一下手动管理的指针：" class="headerlink" title="首先来演示一下手动管理的指针："></a>首先来演示一下手动管理的指针：</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Entity</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Entity</span>() &#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;Constructed Entity!&quot;</span> &lt;&lt; std::endl;<br>    &#125;<br>    ~<span class="hljs-built_in">Entity</span>() &#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;Destroyed Entity!&quot;</span> &lt;&lt; std::endl;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>上面展示的是一个<strong>Entity</strong>类，会在构造和析构时输出文字用于辨识生命周期。</p><p>此时，我们在作用域内调用：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    &#123;<br>        Entity* e = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Entity</span>();<br>    &#125;<br>    std::cin.<span class="hljs-built_in">get</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure><p>输出为：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">Constructed Entity!<br></code></pre></td></tr></table></figure><p>可以看到，在{}内运行完毕后，指针并没有被释放，没有进行析构。</p><h3 id="添加一个作用域指针的类"><a href="#添加一个作用域指针的类" class="headerlink" title="添加一个作用域指针的类"></a>添加一个作用域指针的类</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ScopePtr</span><br>&#123;<br><span class="hljs-keyword">private</span>:<br>    Entity* m_Ptr;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">ScopePtr</span>(Entity* ptr) :<span class="hljs-built_in">m_Ptr</span>(ptr)<br>    &#123;<br>    &#125;;<br>    ~<span class="hljs-built_in">ScopePtr</span>()<br>    &#123;<br>        <span class="hljs-keyword">delete</span> m_Ptr;<br>    &#125;;<br><br>&#125;;<br></code></pre></td></tr></table></figure><p>通过这个类来生成Entity示例。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>    &#123;<br>        ScopePtr e = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Entity</span>();<br>    &#125;<br>    std::cin.<span class="hljs-built_in">get</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出结果如下</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmd">Constructed Entity!<br>Destroyed Entity!<br></code></pre></td></tr></table></figure><p>ScopePtr类在作用域结束后，调用析构函数，删除Entity的指针，完成自动回收流程。</p>]]></content>
    
    
    
    <tags>
      
      <tag>c++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Lambda表达式</title>
    <link href="/2023/12/02/%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <url>/2023/12/02/%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p>Lambda 表达式是 <strong>C++11</strong> 引入的一项功能，它允许你在代码中直接定义匿名函数。</p><p>Lambda 表达式的主要优势是能够轻松地创建临时的、简短的函数，而无需显式地声明函数的名称。</p><p>一个基本的 Lambda 表达式的语法形式如下：</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs elm"><span class="hljs-title">cppCopy</span> code[capture](parameters) -&gt; return_<span class="hljs-keyword">type</span> &#123;<br>    // 函数体<br>&#125;<br></code></pre></td></tr></table></figure><p>其中：</p><ul><li><code>capture</code>：捕获列表，用于捕获外部变量。可以省略，也可以按值或引用捕获变量。</li><li><code>parameters</code>：参数列表，类似于普通函数的参数。</li><li><code>return_type</code>：返回类型，可以省略，编译器会自动推导。</li><li><code>-&gt;</code>：指定返回类型的符号。</li><li><code>&#123;&#125;</code>：Lambda 表达式的函数体。</li></ul><p>以下是一些示例，演示了 Lambda 表达式的不同用法：</p><h3 id="示例1：无参数、无返回值的-Lambda-表达式"><a href="#示例1：无参数、无返回值的-Lambda-表达式" class="headerlink" title="示例1：无参数、无返回值的 Lambda 表达式"></a>示例1：无参数、无返回值的 Lambda 表达式</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ruby">cppCopy codeauto simpleLambda = [] &#123;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;Hello, Lambda!&quot;</span> &lt;&lt; std::endl;<br>&#125;;<br><br>simpleLambda(); <span class="hljs-regexp">//</span> 调用 <span class="hljs-title class_">Lambda</span> 表达式<br></code></pre></td></tr></table></figure><h3 id="示例2：带参数的-Lambda-表达式"><a href="#示例2：带参数的-Lambda-表达式" class="headerlink" title="示例2：带参数的 Lambda 表达式"></a>示例2：带参数的 Lambda 表达式</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp">cppCopy codeauto add = [](<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b) -&gt; <span class="hljs-type">int</span> &#123;<br>    <span class="hljs-keyword">return</span> a + b;<br>&#125;;<br><br>std::cout &lt;&lt; <span class="hljs-string">&quot;Sum: &quot;</span> &lt;&lt; <span class="hljs-built_in">add</span>(<span class="hljs-number">3</span>, <span class="hljs-number">4</span>) &lt;&lt; std::endl;<br></code></pre></td></tr></table></figure><h3 id="示例3：捕获外部变量的-Lambda-表达式"><a href="#示例3：捕获外部变量的-Lambda-表达式" class="headerlink" title="示例3：捕获外部变量的 Lambda 表达式"></a>示例3：捕获外部变量的 Lambda 表达式</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp">cppCopy codeint x = <span class="hljs-number">5</span>;<br><br><span class="hljs-keyword">auto</span> captureLambda = [x](<span class="hljs-type">int</span> y) -&gt; <span class="hljs-type">int</span> &#123;<br>    <span class="hljs-keyword">return</span> x + y;<br>&#125;;<br><br>std::cout &lt;&lt; <span class="hljs-string">&quot;Result: &quot;</span> &lt;&lt; <span class="hljs-built_in">captureLambda</span>(<span class="hljs-number">10</span>) &lt;&lt; std::endl;<br></code></pre></td></tr></table></figure><h3 id="示例4：修改外部变量的-Lambda-表达式"><a href="#示例4：修改外部变量的-Lambda-表达式" class="headerlink" title="示例4：修改外部变量的 Lambda 表达式"></a>示例4：修改外部变量的 Lambda 表达式</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp">cppCopy codeint counter = <span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">auto</span> modifyLambda = [&amp;counter] &#123;<br>    counter++;<br>&#125;;<br><br><span class="hljs-built_in">modifyLambda</span>();<br>std::cout &lt;&lt; <span class="hljs-string">&quot;Counter: &quot;</span> &lt;&lt; counter &lt;&lt; std::endl;<br></code></pre></td></tr></table></figure><p>Lambda 表达式在许多场景中都非常有用，特别是在算法、STL、异步编程等方面。它提供了一种更简洁、灵活的方式来定义和传递函数，减少了需要显式命名函数的繁琐。</p>]]></content>
    
    
    
    <tags>
      
      <tag>c++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>接触cmake</title>
    <link href="/2023/11/23/%E6%8E%A5%E8%A7%A6cmake/"/>
    <url>/2023/11/23/%E6%8E%A5%E8%A7%A6cmake/</url>
    
    <content type="html"><![CDATA[<h2 id="接触CMake"><a href="#接触CMake" class="headerlink" title="接触CMake"></a><strong>接触CMake</strong></h2><p><strong>前言</strong>：</p><ul><li><strong>CMake</strong>是一个<strong>跨平台</strong>的安装<strong>编译工具</strong>，可以用<strong>简单</strong>的语句来描述<strong>所有平台</strong>的安装(编译过程)。</li><li>CMake可以说已经成为<strong>大部分C++开源项目标配</strong></li></ul><h2 id="1-1-Cross-platform-development"><a href="#1-1-Cross-platform-development" class="headerlink" title="1.1 Cross-platform development"></a><strong>1.1 Cross-platform development</strong></h2><p>Let’s assume you have some cross-platform project with C++ code shared along different platforms&#x2F;IDEs. Say you use <code>Visual Studio</code> on Windows, <code>Xcode</code> on OSX and <code>Makefile</code> for Linux:<br><img src="https://cdn.statically.io/gh/humertank0/picx-images-hosting@master/20231126/image.5ftg5gx91ok0.webp" alt="image"><br>What you will do if you want to add new <code>bar.cpp</code> source file? You have to add it to every tool you use:<br><img src="https://cdn.statically.io/gh/humertank0/picx-images-hosting@master/20231126/image-1.5xscuw95bd00.webp" alt="image-1"><br>To keep the environment consistent you have to do the similar update several times. And the most important thing is that you have to do it <strong>manually</strong> (arrow marked with a red color on the diagram in this case). Of course such approach is error prone and not flexible.</p><p>CMake solve this design flaw by adding extra step to development process. You can describe your project in <code>CMakeLists.txt</code> file and use <a href="https://cgold.readthedocs.io/en/latest/glossary/CMake.html#id1">CMake</a> to generate tools you currently interested in using cross-platform <a href="https://cgold.readthedocs.io/en/latest/glossary/CMake.html#id1">CMake</a> code:<br><img src="https://cdn.statically.io/gh/humertank0/picx-images-hosting@master/20231126/image-2.434zi9o8gwa0.webp" alt="image-2"><br>Same action - adding new <code>bar.cpp</code> file, will be done in <strong>one step</strong> now:<br><img src="https://cdn.statically.io/gh/humertank0/picx-images-hosting@master/20231126/image-3.73uxhwq6lv80.webp" alt="image-3"><br>Note that the bottom part of the diagram <strong>was not changed</strong>. I.e. you still can keep using your favorite tools like <code>Visual Studio/msbuild</code>, <code>Xcode/xcodebuild</code> and <code>Makefile/make</code>!</p><hr><h2 id="1-2-语法特性介绍"><a href="#1-2-语法特性介绍" class="headerlink" title="1.2 语法特性介绍"></a><strong>1.2 语法特性介绍</strong></h2><ul><li><p><strong>基本语法格式：指令(参数 1 参数 2…)</strong></p><ul><li>参数使用<strong>括弧</strong>括起</li><li>参数之间使用<strong>空格</strong>或<strong>分号</strong>分开</li></ul></li><li><p><strong>指令是大小写无关的，参数和变量是大小写相关的</strong></p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs makefile">set(HELLO hello.cpp)<br>add_executable(hello main.cpp hello.cpp)<br>ADD_EXECUTABLE(hello main.cpp $&#123;HELLO&#125;)<br></code></pre></td></tr></table></figure></li><li><p><strong>变量使用${}方式取值，但是在 IF 控制语句中是直接使用变量名</strong></p></li></ul><h2 id="1-3-重要指令和CMake常用变量"><a href="#1-3-重要指令和CMake常用变量" class="headerlink" title="1.3 重要指令和CMake常用变量"></a><strong>1.3 重要指令和CMake常用变量</strong></h2><h3 id="1-3-1-重要指令"><a href="#1-3-1-重要指令" class="headerlink" title="1.3.1 重要指令"></a><strong>1.3.1 重要指令</strong></h3><ul><li><p><strong>cmake_minimum_required</strong> <strong>指定CMake的最小版本要求</strong></p><ul><li>语法： <strong>cmake_minimum_required(VERSION versionNumber [FATAL_ERROR])</strong></li></ul><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-comment"># CMake最小版本要求为2.8.3</span><br>cmake_minimum_required(VERSION 2.8.3)<br></code></pre></td></tr></table></figure></li><li><p><strong>project</strong> <strong>定义工程名称，并可指定工程支持的语言</strong></p><ul><li>语法： <strong>project(projectname [CXX] [C] [Java])</strong></li></ul><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-comment"># 指定工程名为HELLOWORLD</span><br>project(HELLOWORLD)<br></code></pre></td></tr></table></figure></li><li><p><strong>set</strong> <strong>显式的定义变量</strong></p><ul><li>语法：<strong>set(VAR [VALUE] [CACHE TYPE DOCSTRING [FORCE]])</strong></li></ul><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-comment"># 定义SRC变量，其值为sayhello.cpp hello.cpp，两个源文件</span><br>set(SRC sayhello.cpp hello.cpp)<br></code></pre></td></tr></table></figure></li><li><p><strong>include_directories 向工程添加多个特定的头文件搜索路径</strong> —&gt;相当于指定g++编译器的-I参数</p><ul><li>语法： <strong>include_directories([AFTER|BEFORE] [SYSTEM] dir1 dir2 …)</strong></li></ul><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-comment"># 将/usr/include/myincludefolder 和 ./include 添加到头文件搜索路径</span><br>include_directories(/usr/<span class="hljs-keyword">include</span>/myincludefolder ./<span class="hljs-keyword">include</span>)<br></code></pre></td></tr></table></figure></li><li><p><strong>link_directories</strong> <strong>向工程添加多个特定的库文件搜索路径</strong> —&gt;相当于指定g++编译器的-L参数</p><ul><li>语法： <strong>link_directories(dir1 dir2 …)</strong></li></ul><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-comment"># 将/usr/lib/mylibfolder 和 ./lib 添加到库文件搜索路径</span><br>link_directories(/usr/lib/mylibfolder ./lib)<br></code></pre></td></tr></table></figure></li><li><p><strong>add_library</strong> <strong>生成库文件</strong></p><ul><li>语法： <strong>add_library(libname [SHARED|STATIC|MODULE] [EXCLUDE_FROM_ALL] source1 source2 … sourceN)</strong></li></ul><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-comment"># 通过变量 SRC 生成 libhello.so 共享（动态）库</span><br>add_library(hello SHARED $&#123;SRC&#125;)<br><span class="hljs-comment"># 通过变量 SRC 生成 静态库的话</span><br>add_library(hello STATIC $&#123;SRC&#125;)<br></code></pre></td></tr></table></figure></li><li><p><strong>add_compile_options</strong> 添加编译参数</p><ul><li>语法：<strong>add_compile_options(<option> …)</strong></li></ul><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-comment"># 添加编译参数 -Wall -std=c++11 -O2</span><br><span class="hljs-comment"># -Wall：这个参数表示开启所有的警告信息，可以帮助您发现代码中的潜在问题。</span><br><span class="hljs-comment"># -std=c++11：这个参数表示使用C++11标准来编译代码，可以让您使用C++11的新特性，比如auto、lambda、nullptr等。</span><br><span class="hljs-comment"># -O0：这是默认的优化级别，表示不进行任何优化，只是将源代码转换为可执行代码。这样可以保证代码的正确性和可调试性，但是执行效率和内存占用都很低。O是大写的。</span><br><span class="hljs-comment"># -O1：这是最低的优化级别，表示进行一些基本的优化，比如删除未使用的变量，简化常量表达式，合并相邻的跳转指令等。这样可以提高一些执行效率和内存占用，但是不会影响代码的可读性和可调试性。</span><br><span class="hljs-comment"># -O2：这个参数表示使用优化级别为2的编译选项，可以让您的代码运行得更快，但是也会增加编译时间和可执行文件大小。</span><br><span class="hljs-comment"># -O3：这是最高的优化级别，表示进行一些激进的优化，比如向量化，循环重排，指令调度，寄存器分配等。这样可以极大提高执行效率和内存占用，但是会严重影响代码的可读性和可调试性，甚至可能导致一些错误或异常。</span><br><span class="hljs-comment"># -Os：这是一个特殊的优化级别，表示进行一些针对空间的优化，比如减少对齐填充，减少符号表，减少重复代码等。这样可以减少可执行文件的大小，但是不会影响执行效率和内存占用。</span><br>add_compile_options(-Wall -std=c++11 -O2)<br></code></pre></td></tr></table></figure></li><li><p><strong>add_executable</strong> <strong>生成可执行文件</strong></p><ul><li>语法：<strong>add_executable(exename source1 source2 … sourceN)</strong></li></ul><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-comment"># 编译main.cpp生成可执行文件main</span><br>add_executable(main main.cpp)<br></code></pre></td></tr></table></figure></li><li><p><strong>target_link_libraries</strong> <strong>为 target 添加需要链接的共享库</strong> –&gt;相同于指定g++编译器-l参数</p><ul><li>语法： <strong>target_link_libraries(target library1&lt;debug | optimized&gt; library2…)</strong></li></ul><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-comment"># 将hello动态库文件(上文生成的)链接到可执行文件main</span><br>target_link_libraries(main hello)<br></code></pre></td></tr></table></figure></li><li><p><strong>add_subdirectory 向当前工程添加存放源文件的子目录，并可以指定中间二进制和目标二进制存放的位置</strong></p><ul><li>语法： <strong>add_subdirectory(source_dir [binary_dir] [EXCLUDE_FROM_ALL])</strong></li></ul><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-comment"># 添加src子目录，src中需有一个CMakeLists.txt</span><br>add_subdirectory(src)<br></code></pre></td></tr></table></figure></li><li><p><strong>aux_source_directory 发现一个目录下所有的源代码文件并将列表存储在一个变量中，这个指令临时被用来自动构建源文件列表</strong></p><ul><li>语法： <strong>aux_source_directory(dir VARIABLE)</strong></li></ul><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-comment"># 定义SRC变量，其值为当前目录下所有的源代码文件</span><br>aux_source_directory(. SRC)<br><span class="hljs-comment"># 编译SRC变量所代表的源代码文件，生成main可执行文件</span><br>add_executable(main $&#123;SRC&#125;)<br></code></pre></td></tr></table></figure><h3 id="1-3-2-CMake常用变量"><a href="#1-3-2-CMake常用变量" class="headerlink" title="1.3.2 CMake常用变量"></a><strong>1.3.2 CMake常用变量</strong></h3><ul><li><p><strong>CMAKE_C_FLAGS gcc编译选项</strong></p></li><li><p><strong>CMAKE_CXX_FLAGS g++编译选项</strong></p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-comment"># 在CMAKE_CXX_FLAGS编译选项后追加-std=c++11</span><br>set( CMAKE_CXX_FLAGS <span class="hljs-string">&quot;$&#123;CMAKE_CXX_FLAGS&#125; -std=c++11&quot;</span>)<br></code></pre></td></tr></table></figure></li><li><p><strong>CMAKE_BUILD_TYPE 编译类型(Debug, Release)</strong></p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-comment"># 设定编译类型为debug，调试时需要选择debug</span><br>set(CMAKE_BUILD_TYPE Debug)<br><span class="hljs-comment"># 设定编译类型为release，发布时需要选择release</span><br>set(CMAKE_BUILD_TYPE Release)<br></code></pre></td></tr></table></figure></li><li><p><strong>CMAKE_BINARY_DIR</strong></p><p><strong>PROJECT_BINARY_DIR</strong></p><p><strong><projectname>_BINARY_DIR</strong></p><blockquote><p>这三个变量指代的内容是一致的。</p><p>如果是 in source build，指的就是工程顶层目录。</p><p>如果是 out-of-source 编译,指的是工程编译发生的目录。</p><p>PROJECT_BINARY_DIR 跟其他指令稍有区别，不过现在，你可以理解为他们是一致的。</p></blockquote></li><li><p><strong>CMAKE_SOURCE_DIR</strong></p><p><strong>PROJECT_SOURCE_DIR</strong></p><p><strong><projectname>_SOURCE_DIR</strong></p><blockquote><p>这三个变量指代的内容是一致的,不论采用何种编译方式,都是工程顶层目录。</p><p>也就是在 in source build时,他跟 CMAKE_BINARY_DIR 等变量一致。</p><p>PROJECT_SOURCE_DIR 跟其他指令稍有区别,现在,你可以理解为他们是一致的。</p></blockquote></li></ul><p></p></li><li><p><strong>CMAKE_C_COMPILER：指定C编译器</strong></p></li><li><p><strong>CMAKE_CXX_COMPILER：指定C++编译器</strong></p></li><li><p><strong>EXECUTABLE_OUTPUT_PATH：可执行文件输出的存放路径</strong></p></li><li><p><strong>LIBRARY_OUTPUT_PATH：库文件输出的存放路径</strong></p></li></ul><h2 id="1-4-CMake编译工程"><a href="#1-4-CMake编译工程" class="headerlink" title="1.4 CMake编译工程"></a><strong>1.4 CMake编译工程</strong></h2><p>CMake目录结构：项目主目录存在一个CMakeLists.txt文件</p><p><strong>两种方式设置编译规则</strong>：</p><ol><li>包含源文件的子文件夹<strong>包含</strong>CMakeLists.txt文件，主目录的CMakeLists.txt通过add_subdirectory添加子目录即可；</li><li>包含源文件的子文件夹<strong>未包含</strong>CMakeLists.txt文件，子目录编译规则体现在主目录的CMakeLists.txt中；</li></ol><h3 id="1-4-1-编译流程"><a href="#1-4-1-编译流程" class="headerlink" title="1.4.1 编译流程"></a><strong>1.4.1 编译流程</strong></h3><p><strong>在 linux 平台下使用 CMake 构建C&#x2F;C++工程的流程如下:</strong></p><ul><li>手动编写 CMakeLists.txt。</li><li>执行命令 <code>cmake PATH</code>生成 Makefile ( PATH 是顶层CMakeLists.txt 所在的目录 )。</li><li>执行命令<code>make</code> 进行编译。</li></ul><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># important tips</span><br>.  <span class="hljs-comment"># 表示当前目录</span><br>./ <span class="hljs-comment"># 表示当前目录</span><br><br>..  <span class="hljs-comment"># 表示上级目录</span><br>../ <span class="hljs-comment"># 表示上级目录</span><br></code></pre></td></tr></table></figure><hr><h3 id="1-4-2-两种构建方式"><a href="#1-4-2-两种构建方式" class="headerlink" title="1.4.2 两种构建方式"></a><strong>1.4.2 两种构建方式</strong></h3><ul><li><p>内部构建(in-source build)：不推荐使用</p><p>内部构建会在同级目录下产生一大堆中间文件，这些中间文件并不是我们最终所需要的，和工程源文件放在一起会显得杂乱无章。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">## 内部构建</span><br><br><span class="hljs-comment"># 在当前目录下，编译本目录的CMakeLists.txt，生成Makefile和其他文件</span><br>cmake .<br><span class="hljs-comment"># 执行make命令，生成target</span><br>make<br><br><span class="hljs-comment">## 如，对main.cpp，CMakeLists.txt进行内部构建，生成其他文件:</span><br>[root@localhost <span class="hljs-keyword">in</span>]<span class="hljs-comment"># tree -h</span><br>.<br>├── [ 14K]  CMakeCache.txt<br>├── [4.0K]  CMakeFiles<br>│   ├── [ 209]  3.27.8<br>│   │   ├── [2.3K]  CMakeCCompiler.cmake<br>│   │   ├── [4.8K]  CMakeCXXCompiler.cmake<br>│   │   ├── [8.3K]  CMakeDetermineCompilerABI_C.bin<br>│   │   ├── [8.3K]  CMakeDetermineCompilerABI_CXX.bin<br>│   │   ├── [ 442]  CMakeSystem.cmake<br>│   │   ├── [  56]  CompilerIdC<br>│   │   │   ├── [8.4K]  a.out<br>│   │   │   ├── [ 26K]  CMakeCCompilerId.c<br>│   │   │   └── [   6]  tmp<br>│   │   └── [  60]  CompilerIdCXX<br>│   │       ├── [8.4K]  a.out<br>│   │       ├── [ 26K]  CMakeCXXCompilerId.cpp<br>│   │       └── [   6]  tmp<br>│   ├── [  85]  cmake.check_cache<br>│   ├── [ 43K]  CMakeConfigureLog.yaml<br>│   ├── [ 592]  CMakeDirectoryInformation.cmake<br>│   ├── [   6]  CMakeScratch<br>│   ├── [ 12K]  feature_tests.bin<br>│   ├── [ 201]  hello.dir<br>│   │   ├── [3.8K]  build.make<br>│   │   ├── [ 272]  cmake_clean.cmake<br>│   │   ├── [ 108]  compiler_depend.make<br>│   │   ├── [ 112]  compiler_depend.ts<br>│   │   ├── [ 559]  DependInfo.cmake<br>│   │   ├── [  89]  depend.make<br>│   │   ├── [ 175]  flags.make<br>│   │   ├── [  61]  link.txt<br>│   │   └── [  43]  progress.make<br>│   ├── [3.3K]  Makefile2<br>│   ├── [7.9K]  Makefile.cmake<br>│   ├── [   6]  pkgRedirects<br>│   ├── [   2]  progress.marks<br>│   └── [ 103]  TargetDirectories.txt<br>├── [1.5K]  cmake_install.cmake<br>├── [ 237]  CMakeLists.txt<br>├── [  77]  main.cpp<br>└── [4.9K]  Makefile<br><br>9 directories, 31 files<br></code></pre></td></tr></table></figure></li><li><p>外部构建(out-of-source build)：推荐使用</p><p>将编译输出文件与源文件放到不同目录中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">## 外部构建</span><br><br><span class="hljs-comment"># 1. 在当前目录下，创建build文件夹</span><br><span class="hljs-built_in">mkdir</span> build<br><span class="hljs-comment"># 2. 进入到build文件夹</span><br><span class="hljs-built_in">cd</span> build<br><span class="hljs-comment"># 3. 编译上级目录的CMakeLists.txt，生成Makefile和其他文件，放置于build文件夹中</span><br>cmake ..<br><span class="hljs-comment"># 4. 执行make命令，生成target</span><br>make<br></code></pre></td></tr></table></figure></li></ul><h2 id="1-5-【实战】CMake代码实践"><a href="#1-5-【实战】CMake代码实践" class="headerlink" title="1.5 【实战】CMake代码实践"></a><strong>1.5 【实战】CMake代码实践</strong></h2><h3 id="1-5-1-最小CMake工程"><a href="#1-5-1-最小CMake工程" class="headerlink" title="1.5.1 最小CMake工程"></a><strong>1.5.1 最小CMake工程</strong></h3><p>cpp源文件</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//helloWorld.cpp</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><br>    std::cout &lt;&lt; <span class="hljs-string">&quot;Hello World!&quot;</span> &lt;&lt; std::endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>CMakeLists.txt</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># Set the minimum version of CMake that can be used</span><br>cmake_minimum_required(VERSION 3.0)<br><br><span class="hljs-comment"># Set the project name</span><br>project (HELLOWORLD)<br><br><span class="hljs-comment"># Add an executable</span><br>add_executable(helloWorld_cmake helloWorld.cpp)<br></code></pre></td></tr></table></figure><p>内部构建</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost hello] cmake .<br>CMake Deprecation Warning at CMakeLists.txt:1 (cmake_minimum_required):<br>  Compatibility with CMake &lt; 3.5 will be removed from a future version of<br>  CMake.<br><br>  Update the VERSION argument &lt;min&gt; value or use a ...&lt;max&gt; suffix to tell<br>  CMake that the project does not need compatibility with older versions.<br><br><br>-- Configuring <span class="hljs-keyword">done</span> (0.0s)<br>-- Generating <span class="hljs-keyword">done</span> (0.0s)<br>-- Build files have been written to: /root/hello<br>[root@localhost hello]<span class="hljs-comment"># make</span><br>    [ 50%] Building CXX object CMakeFiles/helloWorld_cmake.<span class="hljs-built_in">dir</span>/helloWorld.cpp.o<br>    [100%] Linking CXX executable helloWorld_cmake<br>    [100%] Built target helloWorld_cmake<br></code></pre></td></tr></table></figure><p>外部构建</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 新建build文件夹</span><br>[root@localhost hello] <span class="hljs-built_in">mkdir</span> build<br><span class="hljs-comment"># 进入build文件夹</span><br>[root@localhost hello]<span class="hljs-comment"># cd build/</span><br><span class="hljs-comment"># cmake .. 两个.代表是cmake命令从上级文件夹寻找CMakeLists.txt文件夹并执行</span><br>[root@localhost build]<span class="hljs-comment"># cmake ..</span><br>    CMake Deprecation Warning at CMakeLists.txt:1 (cmake_minimum_required):<br>      Compatibility with CMake &lt; 3.5 will be removed from a future version of<br>      CMake.<br><br>      Update the VERSION argument &lt;min&gt; value or use a ...&lt;max&gt; suffix to tell<br>      CMake that the project does not need compatibility with older versions.<br><br><br>-- The C compiler identification is GNU 4.8.5<br>-- The CXX compiler identification is GNU 4.8.5<br>-- Detecting C compiler ABI info<br>-- Detecting C compiler ABI info - <span class="hljs-keyword">done</span><br>-- Check <span class="hljs-keyword">for</span> working C compiler: /bin/cc - skipped<br>-- Detecting C compile features<br>-- Detecting C compile features - <span class="hljs-keyword">done</span><br>-- Detecting CXX compiler ABI info<br>-- Detecting CXX compiler ABI info - <span class="hljs-keyword">done</span><br>-- Check <span class="hljs-keyword">for</span> working CXX compiler: /bin/c++ - skipped<br>-- Detecting CXX compile features<br>-- Detecting CXX compile features - <span class="hljs-keyword">done</span><br>-- Configuring <span class="hljs-keyword">done</span> (0.3s)<br>-- Generating <span class="hljs-keyword">done</span> (0.0s)<br>-- Build files have been written to: /root/hello/build<br>[root@localhost build]<span class="hljs-comment"># make</span><br>    [ 50%] Building CXX object CMakeFiles/helloWorld_cmake.<span class="hljs-built_in">dir</span>/helloWorld.cpp.o<br>    [100%] Linking CXX executable helloWorld_cmake<br>    [100%] Built target helloWorld_cmake<br></code></pre></td></tr></table></figure><h3 id="1-5-2-多目录工程-直接编译"><a href="#1-5-2-多目录工程-直接编译" class="headerlink" title="1.5.2 多目录工程 - 直接编译"></a><strong>1.5.2 多目录工程 - 直接编译</strong></h3><p>首先是源文件，总共三个文件。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs cpp"># 建立include文件夹，编写头文件swap.h。/include/swap.h<br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> once</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">swap</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">swap</span>(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)&#123;<br>        <span class="hljs-keyword">this</span>-&gt;_a = a ;<br>        <span class="hljs-keyword">this</span>-&gt;_b = b;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">printinfo</span><span class="hljs-params">()</span></span>;<br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">int</span> _a;<br>    <span class="hljs-type">int</span> _b;<br>&#125;;<br># 建立src文件夹，编写源文件swap.cpp。/src/swap.cpp<br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;swap.h&quot;</span></span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">swap::run</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> temp;<br>    temp = _a;<br>    _a = _b;<br>    _b = temp;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">swap::printinfo</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;_a = &quot;</span> &lt;&lt; _a &lt;&lt; std::endl;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;_b = &quot;</span> &lt;&lt; _b &lt;&lt; std::endl;<br>&#125;<br># 写main函数，位于根目录。<br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;swap.h&quot;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-function">swap <span class="hljs-title">myswap</span><span class="hljs-params">(<span class="hljs-number">10</span>,<span class="hljs-number">20</span>)</span></span>;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;Before swap:&quot;</span> &lt;&lt; std::endl;<br>    myswap.<span class="hljs-built_in">printinfo</span>();<br>    myswap.<span class="hljs-built_in">run</span>();<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;After  swap:&quot;</span> &lt;&lt; std::endl;<br>    myswap.<span class="hljs-built_in">printinfo</span>();<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># Set the minimum version of CMake that can be used</span><br>cmake_minimum_required(VERSION 3.1)<br><br><span class="hljs-comment">#project name</span><br>project(SWAP)<br><br><span class="hljs-comment">#head file pat</span><br>include_directories( include )<br><br><span class="hljs-comment">#source directory files to var</span><br>add_subdirectory( src DIR_SRCS )<br><br><span class="hljs-comment">#add executable file</span><br>add_executable(swap_02 <span class="hljs-variable">$&#123;TEST_MATH&#125;</span>)<br><br><span class="hljs-comment">#add link library</span><br>target_link_libraries(<span class="hljs-variable">$&#123;FS_BUILD_BINARY_PREFIX&#125;</span>sqrt <span class="hljs-variable">$&#123;LIBRARIES&#125;</span>)<br></code></pre></td></tr></table></figure><h3 id="1-5-3-多目录工程-生成库编译"><a href="#1-5-3-多目录工程-生成库编译" class="headerlink" title="1.5.3 多目录工程 - 生成库编译"></a><strong>1.5.3 多目录工程 - 生成库编译</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># Set the minimum version of CMake that can be used</span><br>cmake_minimum_required(VERSION 3.0)<br><br><span class="hljs-comment">#project name</span><br>project(SWAP_LIBRARY)<br><br><span class="hljs-comment">#add compile options</span><br>add_compile_options(<span class="hljs-string">&quot;-Wall -std=c++11&quot;</span>)<br><br><span class="hljs-comment">#set CMAKE_BUILD_TYPE</span><br><span class="hljs-built_in">set</span>( CMAKE_BUILD_TYPE Debug )<br><br><span class="hljs-comment"># set output binary path</span><br><span class="hljs-built_in">set</span>(EXECUTABLE_OUTPUT_PATH <span class="hljs-variable">$&#123;PROJECT_BINARY_DIR&#125;</span>/bin)<br><br><span class="hljs-comment">############################################################</span><br><span class="hljs-comment"># Create a library</span><br><span class="hljs-comment">############################################################</span><br><br><span class="hljs-comment">#Generate the static library from the library sources</span><br>add_library( swap_library STATIC src/Swap.cpp )<br><br>target_include_directories( swap_lib PUBLIC <span class="hljs-variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/include )<br><br><span class="hljs-comment">############################################################</span><br><span class="hljs-comment"># Create an executable</span><br><span class="hljs-comment">############################################################</span><br><br><span class="hljs-comment"># Add an executable with the above sources</span><br>add_executable( swap_01 main.cpp )<br><br><span class="hljs-comment"># link the new swap_01 target with the swap_lib target</span><br>target_link_libraries( swap_01 swap_liby )<br></code></pre></td></tr></table></figure><h2 id="1-6【实战】小作业"><a href="#1-6【实战】小作业" class="headerlink" title="1.6【实战】小作业"></a>1.6【实战】小作业</h2><h3 id="案例名称：士兵突击"><a href="#案例名称：士兵突击" class="headerlink" title="案例名称：士兵突击"></a><strong>案例名称：士兵突击</strong></h3><h3 id="需求列表："><a href="#需求列表：" class="headerlink" title="需求列表："></a><strong>需求列表：</strong></h3><ol><li><strong>士兵</strong> <strong>许三多</strong> 有一把<strong>枪</strong>，叫做 <strong>AK47</strong></li><li><strong>士兵</strong> 可以 <strong>开火</strong></li><li><strong>士兵</strong> 可以 <strong>给枪装填子弹</strong></li><li><strong>枪</strong> 能够 <strong>发射</strong> 子弹</li><li><strong>枪</strong> 能够 <strong>装填子弹</strong> —— <strong>增加子弹数量</strong></li></ol><h3 id="开发过程："><a href="#开发过程：" class="headerlink" title="开发过程："></a><strong>开发过程：</strong></h3><ul><li><p>开发<strong>枪类</strong></p></li><li><p>开发<strong>士兵</strong>类，其中士兵类多了一个addGun的接口。</p><p><img src="https://cdn.statically.io/gh/humertank0/picx-images-hosting@master/20231126/cmake_solider.6k6hcn18k1c0.webp" alt="cmake_solider"></p><p><img src="https://cdn.statically.io/gh/humertank0/picx-images-hosting@master/20231126/cmake_gun.5wkxn6805380.webp" alt="cmake_gun"></p></li></ul><h3 id="2-1-合理设置项目目录"><a href="#2-1-合理设置项目目录" class="headerlink" title="2.1 合理设置项目目录"></a><strong>2.1 合理设置项目目录</strong></h3><p>由于solider类包含gun类，所以先写gun类。</p><p>新建include、src文件夹。</p><h3 id="2-2-编写项目源文件"><a href="#2-2-编写项目源文件" class="headerlink" title="2.2 编写项目源文件"></a><strong>2.2 编写项目源文件</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/*Include目录下的头文件，两个，Gun.h和Soldier.h*/</span><br><span class="hljs-comment">//Gun.h********************************************</span><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> once</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Gun</span><br>&#123;<br><span class="hljs-keyword">private</span>:<br>    std::string _type;<br>    <span class="hljs-type">int</span> _bullet_count;<br><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Gun</span>(std::string _type)<br>    &#123;<br>        <span class="hljs-keyword">this</span>-&gt;_bullet_count = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">this</span>-&gt;_type = _type;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">addBullet</span><span class="hljs-params">(<span class="hljs-type">int</span> bullet_num)</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">shoot</span><span class="hljs-params">()</span></span>;<br>&#125;;<br><span class="hljs-comment">//Soldier.h********************************************</span><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> once</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;Gun.h&quot;</span></span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Soldier</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Soldier</span>(std::string name);<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">addBulletToGun</span><span class="hljs-params">(<span class="hljs-type">int</span> num)</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">fire</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">addGun</span><span class="hljs-params">(Gun* ptr_gun)</span></span>;<br>    ~<span class="hljs-built_in">Soldier</span>();<br><span class="hljs-keyword">private</span>:<br>    std::string _name;<br>    Gun *_ptr_gun;<br>&#125;;<br><span class="hljs-comment">/*src目录下有两个文件，Gun.cpp和Soldier.cpp*/</span><br><span class="hljs-comment">//Gun.cpp***********************************************</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;Gun.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Gun::addBullet</span><span class="hljs-params">(<span class="hljs-type">int</span> bullet_num)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">this</span>-&gt;_bullet_count += bullet_num;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Gun::shoot</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>-&gt;_bullet_count &lt;= <span class="hljs-number">0</span>)<br>    &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;There is no bullet!&quot;</span> &lt;&lt; endl;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">this</span>-&gt;_bullet_count -= <span class="hljs-number">1</span>;<br>    cout &lt;&lt; <span class="hljs-string">&quot;shoot successfully!&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-comment">//Soldier.cpp*********************************************</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;Soldier.h&quot;</span></span><br><br>Soldier::<span class="hljs-built_in">Soldier</span>(std::string name)<br>&#123;<br>    <span class="hljs-keyword">this</span>-&gt;_name = name;<br>    <span class="hljs-keyword">this</span>-&gt;_ptr_gun = <span class="hljs-literal">nullptr</span>;<br>&#125;<br>Soldier::~<span class="hljs-built_in">Soldier</span>()<br>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>-&gt;_ptr_gun == <span class="hljs-literal">nullptr</span>)<br>        <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">delete</span> <span class="hljs-keyword">this</span>-&gt;_ptr_gun;<br>    <span class="hljs-keyword">this</span>-&gt;_ptr_gun == <span class="hljs-literal">nullptr</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Soldier::addBulletToGun</span><span class="hljs-params">(<span class="hljs-type">int</span> num)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">this</span>-&gt;_ptr_gun-&gt;<span class="hljs-built_in">addBullet</span>(num);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Soldier::fire</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">this</span>-&gt;_ptr_gun-&gt;<span class="hljs-built_in">shoot</span>();<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Soldier::addGun</span><span class="hljs-params">(Gun *ptr_gun)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">this</span>-&gt;_ptr_gun = ptr_gun;<br>&#125;<br><span class="hljs-comment">/*最后是根目录的main.cpp文件*/</span><br><span class="hljs-comment">//main.cpp*************************************************</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;Gun.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;Soldier.h&quot;</span></span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-function">Soldier <span class="hljs-title">sanduo</span><span class="hljs-params">(<span class="hljs-string">&quot;xusanduo&quot;</span>)</span></span>;<br>    sanduo.<span class="hljs-built_in">addGun</span>(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Gun</span>(<span class="hljs-string">&quot;AK-47&quot;</span>));<br>    sanduo.<span class="hljs-built_in">addBulletToGun</span>(<span class="hljs-number">20</span>);<br>    sanduo.<span class="hljs-built_in">fire</span>();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">test</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>最后项目的结构如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">[humertank@localhost 7]$ tree .<br>.<br>├── include<br>│   ├── Gun.h<br>│   └── Soldier.h<br>├── main.cpp<br>└── src<br>    ├── Gun.cpp<br>    └── Soldier.cpp<br><br>2 directories, 5 files<br></code></pre></td></tr></table></figure><p>使用g++进行构建：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">g++ main.cpp src/Gun.cpp src/Soldier.cpp -Iinclude -std=c++11  -o myexe<br><span class="hljs-comment"># 注意，加上c++11才不会报空指针错误。否则需要更改nullptr为NULL</span><br></code></pre></td></tr></table></figure><h3 id="2-3-编写CMakeLists-txt"><a href="#2-3-编写CMakeLists-txt" class="headerlink" title="2.3 编写CMakeLists.txt"></a><strong>2.3 编写CMakeLists.txt</strong></h3><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">cmake_minimum_required</span>(VERSION <span class="hljs-number">3.0</span>)<br><br><span class="hljs-keyword">add_compile_options</span>(-std=c++<span class="hljs-number">11</span>)<br><br><span class="hljs-keyword">project</span>(SOLDIER)<br><br><span class="hljs-comment"># include_directories(include)//两种方式均可</span><br><span class="hljs-keyword">include_directories</span>(<span class="hljs-variable">$&#123;CMAKE_SOURCE_DIR&#125;</span>/<span class="hljs-keyword">include</span>)<br><br><span class="hljs-keyword">add_executable</span>(my_cmake_exe main.cpp src/Gun.cpp src/Soldier.cpp)<br></code></pre></td></tr></table></figure><h3 id="2-4-编译CMake项目"><a href="#2-4-编译CMake项目" class="headerlink" title="2.4 编译CMake项目"></a><strong>2.4 编译CMake项目</strong></h3><p>在根目录新建CMakeLists.txt</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">cmake_minimum_required</span>(VERSION <span class="hljs-number">3.0</span>)<br><br><span class="hljs-keyword">add_compile_options</span>(-std=c++<span class="hljs-number">11</span>)<br><br><span class="hljs-keyword">project</span>(SOLDIER)<br><br><span class="hljs-keyword">set</span>(CMAKE_CXX_FLAGS <span class="hljs-string">&quot;$&#123;CMAKE_CXX_FLAGS&#125; -g -O2 -Wall&quot;</span>)<br><br><span class="hljs-comment"># include_directories(include)</span><br><span class="hljs-keyword">include_directories</span>(<span class="hljs-variable">$&#123;CMAKE_SOURCE_DIR&#125;</span>/<span class="hljs-keyword">include</span>)<br><br><span class="hljs-keyword">add_executable</span>(my_cmake_exe main.cpp src/Gun.cpp src/Soldier.cpp)<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs bash">[humertank@localhost]$ <span class="hljs-built_in">mkdir</span> build<br>[humertank@localhost build]$ <span class="hljs-built_in">cd</span> build<br>[humertank@localhost build]$ cmake ..<br>CMake Deprecation Warning at CMakeLists.txt:1 (cmake_minimum_required):<br>  Compatibility with CMake &lt; 3.5 will be removed from a future version of<br>  CMake.<br><br>  Update the VERSION argument &lt;min&gt; value or use a ...&lt;max&gt; suffix to tell<br>  CMake that the project does not need compatibility with older versions.<br><br><br>-- Configuring <span class="hljs-keyword">done</span> (0.0s)<br>-- Generating <span class="hljs-keyword">done</span> (0.0s)<br>-- Build files have been written to: /home/humertank/Documents/7/build<br>[humertank@localhost build]$ make<br>[ 25%] Building CXX object CMakeFiles/my_cmake_exe.dir/main.cpp.o<br>[ 50%] Building CXX object CMakeFiles/my_cmake_exe.dir/src/Gun.cpp.o<br>[ 75%] Building CXX object CMakeFiles/my_cmake_exe.dir/src/Soldier.cpp.o<br>[100%] Linking CXX executable my_cmake_exe<br>[100%] Built target my_cmake_exe<br>[humertank@localhost build]$ ./my_cmake_exe <br>shoot successfully!<br></code></pre></td></tr></table></figure><h3 id="2-5-配置json文件并调试项目"><a href="#2-5-配置json文件并调试项目" class="headerlink" title="2.5 配置json文件并调试项目"></a><strong>2.5 配置json文件并调试项目</strong></h3><p>手动cmake、make配置调试还是很麻烦，每次更改都要成功生成，如果用vscode自动配置json文件并调试项目就会快很多。</p><p>首先是在.vscode目录生成launch.json文件。（点击调试，添加配置文件，g++）</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-comment">// 使用 IntelliSense 了解相关属性。 </span><br>    <span class="hljs-comment">// 悬停以查看现有属性的描述。</span><br>    <span class="hljs-comment">// 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387</span><br>    <span class="hljs-attr">&quot;version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0.2.0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;configurations&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;g++ - 生成和调试活动文件&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cppdbg&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;request&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;launch&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-comment">// &quot;program&quot;: &quot;$&#123;fileDirname&#125;/$&#123;fileBasenameNoExtension&#125;&quot;,</span><br>            <span class="hljs-attr">&quot;program&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$&#123;workspaceFolder&#125;/build/my_cmake_exe&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;args&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;stopAtEntry&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;cwd&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$&#123;workspaceFolder&#125;&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;environment&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;externalConsole&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;MIMode&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;gdb&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;SetupCommands&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>                <span class="hljs-punctuation">&#123;</span><br>                    <span class="hljs-attr">&quot;description&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;为 gdb 启用整齐打印&quot;</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;text&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;-enable-pretty-printing&quot;</span><span class="hljs-punctuation">,</span>                    <br>                    <span class="hljs-attr">&quot;ignoreFailures&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br>                <span class="hljs-punctuation">&#125;</span><br>            <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;preLaunchTask&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Build&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;miDebuggerPath&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/usr/bin/gdb&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>此文件写好之后，可以直接进行调试当前项目，<strong>但是每次更改源码都需要自己重新构建，因此，在调试之前，加入了提前任务，也就是倒数第二行的preLaunchTask</strong></p><p>配置preLaunchTask之后，需要对应的task.json文件，调试前会先调用task.json的命令，然后进行调试。因此，task.json配置成构建项目的命令即可。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-comment">// See https://go.microsoft.com/fwlink/?LinkId=733558</span><br>    <span class="hljs-comment">// for the documentation about the tasks.json format</span><br>    <span class="hljs-attr">&quot;version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2.0.0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;options&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;cwd&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$&#123;workspaceFolder&#125;/build&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;tasks&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;label&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cmake&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;shell&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;command&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cmake&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;args&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>                <span class="hljs-string">&quot;..&quot;</span><br>            <span class="hljs-punctuation">]</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;label&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;make&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;group&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;kind&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;build&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;isDefault&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;command&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;make&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;args&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br><br>            <span class="hljs-punctuation">]</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;label&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Build&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;dependsOrder&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;sequence&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-comment">//按列出的顺序执行任务依赖项</span><br>            <span class="hljs-attr">&quot;dependsOn&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><br>                <span class="hljs-string">&quot;cmake&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-string">&quot;make&quot;</span><br>            <span class="hljs-punctuation">]</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>从上述文件可以看出，任务为cmake和make，然后<strong>Build</strong>任务确定了cmake和make的顺序。将<strong>Build</strong>添加到launch.json的preLaunchTask中即可完成自动化构建和调试。</p>]]></content>
    
    
    
    <tags>
      
      <tag>cmake</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo设置指南</title>
    <link href="/2023/11/18/hexo%E8%AE%BE%E7%BD%AE%E6%8C%87%E5%8D%97/"/>
    <url>/2023/11/18/hexo%E8%AE%BE%E7%BD%AE%E6%8C%87%E5%8D%97/</url>
    
    <content type="html"><![CDATA[<h1 id="hexo的设置指南"><a href="#hexo的设置指南" class="headerlink" title="hexo的设置指南"></a>hexo的设置指南</h1><h2 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h2><p>可以使用npm一键安装脚本。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 对于windows用户，直接去官网下载node.js，安装后设置path</span><br>https://nodejs.org/en/download<br><span class="hljs-comment"># 对于Debian系的Linux，如Ubuntu，可以使用apt安装</span><br>sudo apt install npm<br><span class="hljs-comment"># 对于ArchLinux，可以使用pacman安装</span><br>sudo pacman -Sy npm<br></code></pre></td></tr></table></figure><p>安装hexo</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install -g hexo-cli<br></code></pre></td></tr></table></figure><p>确认安装完成，查看版本号</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo -v<br><span class="hljs-comment">#INFO  Validating config</span><br><span class="hljs-comment"># hexo: 6.3.0</span><br><span class="hljs-comment"># hexo-cli: 4.3.1</span><br><span class="hljs-comment"># os: win32 10.0.22631</span><br><span class="hljs-comment"># node: 20.9.0</span><br><span class="hljs-comment"># acorn: 8.10.0</span><br><span class="hljs-comment"># ada: 2.6.0</span><br><span class="hljs-comment"># ares: 1.19.1</span><br><span class="hljs-comment"># base64: 0.5.0</span><br><span class="hljs-comment"># brotli: 1.0.9</span><br><span class="hljs-comment"># cjs_module_lexer: 1.2.2</span><br><span class="hljs-comment"># cldr: 43.1</span><br><span class="hljs-comment"># icu: 73.2</span><br><span class="hljs-comment"># llhttp: 8.1.1</span><br><span class="hljs-comment"># modules: 115</span><br><span class="hljs-comment"># napi: 9</span><br><span class="hljs-comment"># nghttp2: 1.57.0</span><br><span class="hljs-comment"># nghttp3: 0.7.0</span><br><span class="hljs-comment"># ngtcp2: 0.8.1</span><br><span class="hljs-comment"># openssl: 3.0.10+quic</span><br><span class="hljs-comment"># simdutf: 3.2.17</span><br><span class="hljs-comment"># tz: 2023c</span><br><span class="hljs-comment"># undici: 5.26.3</span><br><span class="hljs-comment"># unicode: 15.0</span><br><span class="hljs-comment"># uv: 1.46.0</span><br><span class="hljs-comment"># uvwasi: 0.0.18</span><br><span class="hljs-comment"># v8: 11.3.244.8-node.16</span><br><span class="hljs-comment"># zlib: 1.2.13.1-motley</span><br></code></pre></td></tr></table></figure><h1 id="2-创建项目hexo并初始化"><a href="#2-创建项目hexo并初始化" class="headerlink" title="2. 创建项目hexo并初始化"></a>2. 创建项目<strong>hexo</strong>并初始化</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo init hexo<br><span class="hljs-built_in">cd</span> hexo<br>npm install<br></code></pre></td></tr></table></figure><h1 id="3-本地启动"><a href="#3-本地启动" class="headerlink" title="3. 本地启动"></a>3. 本地启动</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo g //hexo generate<br>hexo server<br></code></pre></td></tr></table></figure><p>本地服务启动，端口号是4000，打开浏览器输入</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">http:</span><span class="hljs-comment">//localhost:4000</span><br></code></pre></td></tr></table></figure><h1 id="4-更换主题"><a href="#4-更换主题" class="headerlink" title="4. 更换主题"></a>4. 更换主题</h1><p>主题可以从<a href="https://hexo.io/themes/">官网</a>找自己喜欢的。本文以<strong>Next</strong>为例。</p><p>安装主题,在根目录下面的themes文件夹中,将克隆的文件放到&#x2F;themes&#x2F;next文件夹中。</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">cd</span> hexo-blog<br>git clone https://github.<span class="hljs-keyword">com</span>/<span class="hljs-keyword">next</span>-theme/hexo-theme-<span class="hljs-keyword">next</span>.git themes/<span class="hljs-keyword">next</span><br></code></pre></td></tr></table></figure><p>从根目录找到_config.yml文件，在文件中找到<strong>theme</strong>字段，修改为<strong>next</strong>。</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs autoit"><span class="hljs-meta"># theme: landscape</span><br>theme: <span class="hljs-keyword">next</span><br></code></pre></td></tr></table></figure><p>本地启动，进行测试。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo g //hexo generate<br>hexo server<br></code></pre></td></tr></table></figure><h1 id="5-创建文章"><a href="#5-创建文章" class="headerlink" title="5.创建文章"></a>5.创建文章</h1><p>打开根目录中的 _config.yml进行确认，为了在生成文章的时候生成一个同名的资源目录用于存放图片文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">post_asset_folder:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>使用如下命令，创建一篇新文章，名为“test”</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haxe">hexo <span class="hljs-keyword">new</span> <span class="hljs-type">post</span> test<br></code></pre></td></tr></table></figure><p>关于图片的引用，可参考<a href="https://hexo.io/zh-cn/docs/asset-folders.html">官方文档</a></p><p>下面给出了三种引用方式：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">test</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2023-11-18 19:14:26</span><br><span class="hljs-attr">tags:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">test</span><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-string">This</span> <span class="hljs-string">paper</span> <span class="hljs-string">is</span> <span class="hljs-string">used</span> <span class="hljs-string">for</span> <span class="hljs-string">testing.</span><br><br>&#123;<span class="hljs-string">%</span> <span class="hljs-string">asset_img</span> <span class="hljs-string">test.png</span> <span class="hljs-string">图片引用方法一</span> <span class="hljs-string">%</span>&#125;<br><br><span class="hljs-type">![</span><span class="hljs-string">图片引用方法二](test.png)</span><br><br><span class="hljs-type">![</span><span class="hljs-string">图片引用方法三](/images/test.png)</span><br></code></pre></td></tr></table></figure><h1 id="6-页面细节改动"><a href="#6-页面细节改动" class="headerlink" title="6. 页面细节改动"></a>6. 页面细节改动</h1><p>页面的细节改动，主要从_config.yml文件中进行修改。具体的自定义修改可查看<a href="https://hexo.io/docs/">官方文档</a></p><h1 id="7-发布到githubPages"><a href="#7-发布到githubPages" class="headerlink" title="7.发布到githubPages"></a>7.发布到githubPages</h1><p>安装hexo-deployer-git</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">npm install hexo-deployer-git <span class="hljs-comment">--save</span><br></code></pre></td></tr></table></figure><p>修改_config.yml文件，配置github信息</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">deploy:</span><br><span class="hljs-symbol">    type:</span> git<br><span class="hljs-symbol">    repo:</span> https:<span class="hljs-comment">//github.com/your-github-id/your-github-id.github.io.git</span><br><span class="hljs-symbol">    branch:</span> main<br><span class="hljs-symbol">    token:</span> (githubPagesToken)<br></code></pre></td></tr></table></figure><p>token需要从GitHub获取，并授予token管理库的权限。<br>设置完毕后，执行部署命令</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo g -d</span><br></code></pre></td></tr></table></figure><p>建议先本地测试，再进行部署</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs scss">hexo clean<br>hexo <span class="hljs-built_in">g</span>(enerate)<br>hexo <span class="hljs-built_in">s</span>(erver)<br># 本地测试通过后<br>hexo <span class="hljs-built_in">d</span>(eploy)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>写入excel表格</title>
    <link href="/2023/11/18/%E5%86%99%E5%85%A5excel%E8%A1%A8%E6%A0%BC/"/>
    <url>/2023/11/18/%E5%86%99%E5%85%A5excel%E8%A1%A8%E6%A0%BC/</url>
    
    <content type="html"><![CDATA[<h1 id="将数据写入-excel-表格"><a href="#将数据写入-excel-表格" class="headerlink" title="将数据写入 excel 表格"></a>将数据写入 excel 表格</h1><p>用的是 xlrd 和 xlwt，由于需要频繁开关xls文件，不适合连续写入，建议 <strong>openpyxl</strong> 库，后续会进行更新。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># coding=UTF-8</span><br><span class="hljs-keyword">import</span> xlrd<br><span class="hljs-keyword">import</span> xlwt<br><span class="hljs-keyword">from</span> xlutils.copy <span class="hljs-keyword">import</span> copy<br> <br> <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">write_excel_xls</span>(<span class="hljs-params">path, sheet_name, value</span>):<br>    index = <span class="hljs-built_in">len</span>(value)  <span class="hljs-comment"># 获取需要写入数据的行数</span><br>    workbook = xlwt.Workbook()  <span class="hljs-comment"># 新建一个工作簿</span><br>    sheet = workbook.add_sheet(sheet_name)  <span class="hljs-comment"># 在工作簿中新建一个表格</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, index):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(value[i])):<br>            sheet.write(i, j, value[i][j])  <span class="hljs-comment"># 像表格中写入数据（对应的行和列）</span><br>    workbook.save(path)  <span class="hljs-comment"># 保存工作簿</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;xls格式表格写入数据成功！&quot;</span>)<br> <br> <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">write_excel_xls_append</span>(<span class="hljs-params">path, value</span>):<br>    index = <span class="hljs-built_in">len</span>(value)  <span class="hljs-comment"># 获取需要写入数据的行数</span><br>    workbook = xlrd.open_workbook(path)  <span class="hljs-comment"># 打开工作簿</span><br>    sheets = workbook.sheet_names()  <span class="hljs-comment"># 获取工作簿中的所有表格</span><br>    worksheet = workbook.sheet_by_name(sheets[<span class="hljs-number">0</span>])  <span class="hljs-comment"># 获取工作簿中所有表格中的的第一个表格</span><br>    rows_old = worksheet.nrows  <span class="hljs-comment"># 获取表格中已存在的数据的行数</span><br>    new_workbook = copy(workbook)  <span class="hljs-comment"># 将xlrd对象拷贝转化为xlwt对象</span><br>    new_worksheet = new_workbook.get_sheet(<span class="hljs-number">0</span>)  <span class="hljs-comment"># 获取转化后工作簿中的第一个表格</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, index):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(value[i])):<br>            new_worksheet.write(i+rows_old, j, value[i][j])  <span class="hljs-comment"># 追加写入数据，注意是从i+rows_old行开始写入</span><br>    new_workbook.save(path)  <span class="hljs-comment"># 保存工作簿</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;xls格式表格【追加】写入数据成功！&quot;</span>)<br> <br> <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">read_excel_xls</span>(<span class="hljs-params">path</span>):<br>    workbook = xlrd.open_workbook(path)  <span class="hljs-comment"># 打开工作簿</span><br>    sheets = workbook.sheet_names()  <span class="hljs-comment"># 获取工作簿中的所有表格</span><br>    worksheet = workbook.sheet_by_name(sheets[<span class="hljs-number">0</span>])  <span class="hljs-comment"># 获取工作簿中所有表格中的的第一个表格</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, worksheet.nrows):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, worksheet.ncols):<br>            <span class="hljs-built_in">print</span>(worksheet.cell_value(i, j), <span class="hljs-string">&quot;\t&quot;</span>, end=<span class="hljs-string">&quot;&quot;</span>)  <span class="hljs-comment"># 逐行逐列读取数据</span><br>        <span class="hljs-built_in">print</span>()<br> <br> <br>book_name_xls = <span class="hljs-string">&#x27;xls格式测试工作簿.xls&#x27;</span><br> <br>sheet_name_xls = <span class="hljs-string">&#x27;xls格式测试表&#x27;</span><br> <br>value_title = [[<span class="hljs-string">&quot;姓名&quot;</span>, <span class="hljs-string">&quot;性别&quot;</span>, <span class="hljs-string">&quot;年龄&quot;</span>, <span class="hljs-string">&quot;城市&quot;</span>, <span class="hljs-string">&quot;职业&quot;</span>],]<br> <br>value1 = [[<span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-string">&quot;男&quot;</span>, <span class="hljs-string">&quot;19&quot;</span>, <span class="hljs-string">&quot;杭州&quot;</span>, <span class="hljs-string">&quot;研发工程师&quot;</span>],<br>          [<span class="hljs-string">&quot;李四&quot;</span>, <span class="hljs-string">&quot;男&quot;</span>, <span class="hljs-string">&quot;22&quot;</span>, <span class="hljs-string">&quot;北京&quot;</span>, <span class="hljs-string">&quot;医生&quot;</span>],<br>          [<span class="hljs-string">&quot;王五&quot;</span>, <span class="hljs-string">&quot;女&quot;</span>, <span class="hljs-string">&quot;33&quot;</span>, <span class="hljs-string">&quot;珠海&quot;</span>, <span class="hljs-string">&quot;出租车司机&quot;</span>],]<br> <br>value2 = [[<span class="hljs-string">&quot;Tom&quot;</span>, <span class="hljs-string">&quot;男&quot;</span>, <span class="hljs-string">&quot;21&quot;</span>, <span class="hljs-string">&quot;西安&quot;</span>, <span class="hljs-string">&quot;测试工程师&quot;</span>],<br>          [<span class="hljs-string">&quot;Jones&quot;</span>, <span class="hljs-string">&quot;女&quot;</span>, <span class="hljs-string">&quot;34&quot;</span>, <span class="hljs-string">&quot;上海&quot;</span>, <span class="hljs-string">&quot;产品经理&quot;</span>],<br>          [<span class="hljs-string">&quot;Cat&quot;</span>, <span class="hljs-string">&quot;女&quot;</span>, <span class="hljs-string">&quot;56&quot;</span>, <span class="hljs-string">&quot;上海&quot;</span>, <span class="hljs-string">&quot;教师&quot;</span>],]<br> <br> <br>write_excel_xls(book_name_xls, sheet_name_xls, value_title)<br>write_excel_xls_append(book_name_xls, value1)<br>write_excel_xls_append(book_name_xls, value2)<br>read_excel_xls(book_name_xls)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>实验计时器</title>
    <link href="/2023/11/18/%E5%AE%9E%E9%AA%8C%E8%AE%A1%E6%97%B6%E5%99%A8/"/>
    <url>/2023/11/18/%E5%AE%9E%E9%AA%8C%E8%AE%A1%E6%97%B6%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="程序计时"><a href="#程序计时" class="headerlink" title="程序计时"></a>程序计时</h1><h1 id="方式一（更精确）"><a href="#方式一（更精确）" class="headerlink" title="方式一（更精确）"></a>方式一（更精确）</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br>start = time.perf_counter()<br><br><span class="hljs-comment"># 代码块部分</span><br>a = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(a))<br>    a[i]=a[i]*i<br><br>end = time.perf_counter()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;:.16f&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(end-start),<span class="hljs-string">&#x27;秒&#x27;</span>)<br></code></pre></td></tr></table></figure><h2 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br>start = time.time()<br><br><span class="hljs-comment"># 代码块部分</span><br><br><span class="hljs-built_in">print</span>(time.time()-start)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python命名规范</title>
    <link href="/2023/11/18/python%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83/"/>
    <url>/2023/11/18/python%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83/</url>
    
    <content type="html"><![CDATA[<h1 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h1><p>Google Python 命名规范</p><p>常用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">模块名写法: module_name ;<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">包名写法: package_name ;<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">类名: ClassName ;<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">方法名: method_name ;<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">异常名: ExceptionName ;<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">函数名: function_name ;<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">全局常量名: GLOBAL_CONSTANT_NAME ;<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">全局变量名: global_var_name ;<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">实例名: instance_var_name ;<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">函数参数名: function_parameter_name ;<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">局部变量名: local_var_name.函数名,变量名和文件名应该是描述性的,尽量避免缩写,特别要避免使用非项目人员不清楚难以理解的缩写,不要通过删除单词中的字母来进行缩写.始终使用.py作为文件后缀名,不要用破折号.<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>numpy</title>
    <link href="/2023/11/18/numpy/"/>
    <url>/2023/11/18/numpy/</url>
    
    <content type="html"><![CDATA[<h1 id="Numpy"><a href="#Numpy" class="headerlink" title="Numpy"></a>Numpy</h1><h1 id="ndarray-属性"><a href="#ndarray-属性" class="headerlink" title="ndarray 属性"></a>ndarray 属性</h1><p><code>shape</code>：返回一个元组，表示 array 的形状</p><p><code>ndim</code>：返回一个数字，表示 array 的维度的数目</p><p><code>size</code>：返回一个数字，表示 array 中所有数据元素的数目</p><p><code>dtype</code>：array 中的元素的数据类型</p><p><code>itemsize</code>：表示数组中每个元素的字节大小</p><h1 id="创建-array-的方法"><a href="#创建-array-的方法" class="headerlink" title="创建 array 的方法"></a>创建 array 的方法</h1><ul><li>从 Python 的列表 list 和嵌套列表创建 array</li><li>使用预定函数 arange、linspace 等创建等差数组</li><li>使用 ones、ones_like、zeros、zeros_like、empty、empty_like、full、full_like、eye 等函数创建</li><li>生成随机数的 np.random 模块创建</li></ul><h2 id="np-arange-start-stop-step-dtype"><a href="#np-arange-start-stop-step-dtype" class="headerlink" title="np.arange(start,stop,step,dtype)"></a><strong>np.arange(start,stop,step,dtype)</strong></h2><p>使用 <code>np.arange(start,stop,step,dtype)</code> 生成等差数组</p><ul><li>start 表示开始的数（包含） 默认从 0 开始</li><li>stop 表示结束的数（不包含）</li><li>step 指定步长 默认为 1</li><li>dtype 指定数据类型</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># _创建了一个从0到9的数组 不包含10  步长默认为1_</span><br>np.arrange(<span class="hljs-number">10</span>)<br><span class="hljs-comment">#array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">_<span class="hljs-comment"># [0,10)区间  左闭右开   指定步长为2_</span><br>np.arange(<span class="hljs-number">0</span>, <span class="hljs-number">10</span>, <span class="hljs-number">2</span>)<br><span class="hljs-comment"># array([0, 2, 4, 6, 8])</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">_<span class="hljs-comment"># reshape 可以改变数组的形状_</span><br>_<span class="hljs-comment"># 将一维数组 改成 2行5列的 2维数组_</span><br>np.arange(<span class="hljs-number">10</span>).reshape(<span class="hljs-number">2</span>,<span class="hljs-number">5</span>)<br><span class="hljs-comment"># array([[0, 1, 2, 3, 4], [5, 6, 7, 8, 9]])</span><br></code></pre></td></tr></table></figure><h2 id="np-linspace-start-stop-num-endpoint"><a href="#np-linspace-start-stop-num-endpoint" class="headerlink" title="np.linspace(start,stop,num,endpoint)** **"></a><strong>np.linspace(start,stop,num,endpoint)</strong>** **</h2><p>使用 np.linspace(start,stop,num,endpoint) 创建等差数组-指定数量</p><ul><li>start 起始值</li><li>stop 结束值</li><li>num 要生成的等间隔样例数量，默认为 50</li><li>endpoint 序列中是否包含 stop 值， 默认为 true</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">np.linspace(<span class="hljs-number">0</span>,<span class="hljs-number">10</span>)<br><span class="hljs-comment">#array([ 0. , 0.20408163, 0.40816327, 0.6122449 , 0.81632653, 1.02040816, 1.2244898 , 1.42857143, 1.63265306, 1.83673469, 2.04081633, 2.24489796, 2.44897959, 2.65306122, 2.85714286, 3.06122449, 3.26530612, 3.46938776, 3.67346939, 3.87755102, 4.08163265, 4.28571429, 4.48979592, 4.69387755, 4.89795918, 5.10204082, 5.30612245, 5.51020408, 5.71428571, 5.91836735, 6.12244898, 6.32653061, 6.53061224, 6.73469388, 6.93877551, 7.14285714, 7.34693878, 7.55102041, 7.75510204, 7.95918367, 8.16326531, 8.36734694, 8.57142857, 8.7755102 , 8.97959184, 9.18367347, 9.3877551 , 9.59183673, 9.79591837, 10. ])</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">np.linspace(<span class="hljs-number">0</span>, <span class="hljs-number">10</span>, <span class="hljs-number">5</span>)<br><span class="hljs-comment"># array([ 0. , 2.5, 5. , 7.5, 10. ])</span><br>np.linspace(<span class="hljs-number">0</span>,<span class="hljs-number">10</span>,<span class="hljs-number">5</span>,endpoint=<span class="hljs-literal">False</span>)<br><span class="hljs-comment"># array([0., 2., 4., 6., 8.])</span><br></code></pre></td></tr></table></figure><h2 id="ones、ones-like、zeros、zeros-like、empty、empty-like、full、full-like、eye"><a href="#ones、ones-like、zeros、zeros-like、empty、empty-like、full、full-like、eye" class="headerlink" title="ones、ones_like、zeros、zeros_like、empty、empty_like、full、full_like、eye"></a><strong>ones、ones_like、zeros、zeros_like、empty、empty_like、full、full_like、eye</strong></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">_<span class="hljs-comment"># 使用ones创建全是1的数组_</span><br>np.ones(<span class="hljs-number">10</span>)<br><span class="hljs-comment"># array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])</span><br>np.ones((<span class="hljs-number">2</span>, <span class="hljs-number">4</span>))<br><span class="hljs-comment"># array([[1., 1., 1., 1.], [1., 1., 1., 1.]])</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">_<span class="hljs-comment"># 使用ones_like创建形状相同的数组_</span><br>x=np.arange(<span class="hljs-number">5</span>)<br>np.ones_like(x)<br><span class="hljs-comment"># array([1, 1, 1, 1, 1])</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># np.zeros()、np.zeros_like()同ones</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">_<span class="hljs-comment"># 使用empty创建未初始化的数组_</span><br>_<span class="hljs-comment"># 注意：数据是未初始化的，里面的值可能是随机值不要用_</span><br>np.empty(<span class="hljs-number">10</span>)<br><span class="hljs-comment"># array([            nan, 0.00000000e+000, 1.23162017e-311, 2.02369289e-320,</span><br><span class="hljs-comment">#       0.00000000e+000, 0.00000000e+000, 0.00000000e+000, 0.00000000e+000,</span><br><span class="hljs-comment">#      0.00000000e+000, 0.00000000e+000])</span><br>np.empty_like(x)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">_<span class="hljs-comment"># 使用full创建指定值的数组_</span><br>np.full(<span class="hljs-number">10</span>, <span class="hljs-number">35</span>)<br><span class="hljs-comment">#array([35, 35, 35, 35, 35, 35, 35, 35, 35, 35])</span><br>np.full_like(x)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">_<span class="hljs-comment"># 使用 eye 函数创建 对角线的地方为1，其余的地方为0._</span><br>np.eye(<span class="hljs-number">5</span>)<br><span class="hljs-comment">#array([[1., 0., 0., 0., 0.],</span><br><span class="hljs-comment">#       [0., 1., 0., 0., 0.],</span><br><span class="hljs-comment">#       [0., 0., 1., 0., 0.],</span><br><span class="hljs-comment">#       [0., 0., 0., 1., 0.],</span><br><span class="hljs-comment">#       [0., 0., 0., 0., 1.]])</span><br></code></pre></td></tr></table></figure><h2 id="np-random"><a href="#np-random" class="headerlink" title="np.random"></a><code>np.random</code></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 设置随机种子，作用是使得每次随机的结果固定</span><br>np.random.seed(<span class="hljs-number">100</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 返回数据在[0,1)之间，左闭右开</span><br>np.random.rand(<span class="hljs-number">5</span>)<br><span class="hljs-comment"># array([0.70043712, 0.84418664, 0.67651434, 0.72785806, 0.95145796])</span><br><span class="hljs-comment"># 随机生成2行5列的2维数组，数据在[0,1)之间</span><br>np.random.rand(<span class="hljs-number">2</span>,<span class="hljs-number">5</span>)<br><span class="hljs-comment"># array([[0.0127032 , 0.4135877 , 0.04881279, 0.09992856, 0.50806631], [0.20024754, 0.74415417, 0.192892 , 0.70084475, 0.29322811]])</span><br>_<span class="hljs-comment"># 生成随机整数  区间范围：[2,5) 左闭右开  包含2不包含5_</span><br>np.random.randint(<span class="hljs-number">2</span>,<span class="hljs-number">5</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">_<span class="hljs-comment"># 指定shape,前两位表示取值范围，左闭右开，第三个参数表示shape，长度_</span><br>np.random.randint(<span class="hljs-number">2</span>,<span class="hljs-number">5</span>,<span class="hljs-number">5</span>)<br><span class="hljs-comment"># array([2, 2, 4, 2, 2])</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">_<span class="hljs-comment">#uniform() 在 [low,high) 之间 生成均匀分布的数字_</span><br>np.random.uniform(<span class="hljs-number">2</span>,<span class="hljs-number">5</span>,<span class="hljs-number">4</span>)<br><span class="hljs-comment"># array([2.09469406, 4.51089172, 2.88254137, 2.20636031])</span><br>np.random.uniform(<span class="hljs-number">2</span>,<span class="hljs-number">5</span>,(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>))<br><span class="hljs-comment"># array([[3.58969008, 3.82705545, 3.41092036],</span><br><span class="hljs-comment">#       [2.89800039, 2.96823952, 3.03827621]])</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">_<span class="hljs-comment"># randn  返回数据具有标准正态分布 # 即：均值为0 方差为1_</span><br>np.random.randn(<span class="hljs-number">5</span>)<br><span class="hljs-comment"># array([ 0.08879087, -0.46210034,  0.81213128, -0.86038511,  0.77408907])</span><br>np.random.randn(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>)<br><span class="hljs-comment"># array([[-1.32394829,  0.26291796,  1.42771125],</span><br><span class="hljs-comment">#        [ 0.66524811, -1.50827076,  2.24070462]])</span><br><br>_<span class="hljs-comment"># normal()  可以指定均值和标准差差,第一、二个参数表示均值和标准差，_</span><br>_<span class="hljs-comment"># 第三个参数表示shape_</span><br>np.random.normal(<span class="hljs-number">1</span>,<span class="hljs-number">10</span>,<span class="hljs-number">5</span>)<br>np.random.normal(<span class="hljs-number">1</span>,<span class="hljs-number">10</span>,(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>))<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># choice 从给定的数组里，生成随机结果</span><br>np.random.choice(<span class="hljs-number">5</span>,<span class="hljs-number">3</span>)<br><span class="hljs-comment"># array([3, 1, 4])</span><br><span class="hljs-comment"># 等同于 np.random.choice(0,5,3)  在[0,5)的区间范围内，生成三个数据</span><br>np.random.choice(<span class="hljs-number">5</span>,(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>))<br><span class="hljs-comment"># array([[2, 2, 0],</span><br><span class="hljs-comment">#        [4, 2, 2]])</span><br>np.random.choice([<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>], <span class="hljs-number">3</span>)<br><span class="hljs-comment"># array([3, 3, 5])</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python">_<span class="hljs-comment"># shuffle 把一个数组进行随机排列_</span><br>a = np.arange(<span class="hljs-number">10</span>)np.random.shuffle(a) <br>a<br><span class="hljs-comment"># array([9, 5, 4, 1, 6, 2, 3, 0, 8, 7])</span><br><br>a = np.arange(<span class="hljs-number">20</span>).reshape(<span class="hljs-number">4</span>, <span class="hljs-number">5</span>)<br>a<br><span class="hljs-comment"># array([[ 0,  1,  2,  3,  4],</span><br><span class="hljs-comment">#        [ 5,  6,  7,  8,  9],</span><br><span class="hljs-comment">#        [10, 11, 12, 13, 14],</span><br><span class="hljs-comment">#        [15, 16, 17, 18, 19]])</span><br><br>_<span class="hljs-comment"># 如果数组是多维的  则只会在第一维度打散数据_</span><br>np.random.shuffle(a)<br>a<br><span class="hljs-comment"># array([[10, 11, 12, 13, 14], [15, 16, 17, 18, 19], [ 5, 6, 7, 8, 9], [ 0, 1, 2, 3, 4]])</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python">_<span class="hljs-comment"># permutation 把一个数组进行随机排列  或者数字的全排列_</span><br>np.random.permutation(<span class="hljs-number">10</span>)<br><span class="hljs-comment"># array([4, 9, 8, 7, 3, 5, 6, 1, 0, 2])</span><br><br>arr = np.arange(<span class="hljs-number">9</span>).reshape((<span class="hljs-number">3</span>,<span class="hljs-number">3</span>))<br>arr<br><span class="hljs-comment"># array([[0, 1, 2], [3, 4, 5], [6, 7, 8]])</span><br><br>_<span class="hljs-comment"># permutation 与 shuffle 函数功能相同  区别在于：_</span><br>_<span class="hljs-comment"># 注意 __permutation不会更改原来的arr 会返回一个新的copy_</span><br>np.random.permutation(arr)<br><span class="hljs-comment"># array([[3, 4, 5], [6, 7, 8], [0, 1, 2]])</span><br>arr<br><span class="hljs-comment"># array([[0, 1, 2], [3, 4, 5], [6, 7, 8]])</span><br></code></pre></td></tr></table></figure><h1 id="numpy-索引"><a href="#numpy-索引" class="headerlink" title="numpy 索引"></a>numpy 索引</h1><h2 id="基础索引"><a href="#基础索引" class="headerlink" title="基础索引"></a>基础索引</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">_<span class="hljs-comment"># 一维向量_</span><br>x = np.arange(<span class="hljs-number">10</span>)<br>x<br><span class="hljs-comment"># array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">_<span class="hljs-comment"># 二维向量 一般用大写字母_</span><br>Y = np.arange(<span class="hljs-number">20</span>).reshape(<span class="hljs-number">4</span>, <span class="hljs-number">5</span>)<br>Y<br><span class="hljs-comment"># array([[ 0, 1, 2, 3, 4], [ 5, 6, 7, 8, 9], [10, 11, 12, 13, 14],</span><br><span class="hljs-comment">#        [15, 16, 17, 18,19]])</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">_<span class="hljs-comment"># 取索引从‘2’到‘倒数第一 个’(不包含倒数第一个)_(左闭右开)</span><br>x[<span class="hljs-number">2</span>:-<span class="hljs-number">1</span>]<br><span class="hljs-comment"># array([2, 3, 4, 5, 6, 7, 8])</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">_<span class="hljs-comment"># 取 第1行第1列的数 _</span><br>Y[<span class="hljs-number">0</span>, <span class="hljs-number">0</span>]<br><span class="hljs-comment"># 0</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">_<span class="hljs-comment"># 取索引为第2行的数据_</span><br>Y[<span class="hljs-number">2</span>]<br><span class="hljs-comment"># array([10, 11, 12, 13, 14])</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">_<span class="hljs-comment"># 取索引为第2列的数据_</span><br>Y[:,<span class="hljs-number">2</span>]<br><span class="hljs-comment"># array([ 2, 7, 12, 17])</span><br></code></pre></td></tr></table></figure><h2 id="神奇索引"><a href="#神奇索引" class="headerlink" title="神奇索引"></a>神奇索引</h2><p>就是用整数数组进行的索引</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">x = np.arange(<span class="hljs-number">10</span>)<br>x<br><span class="hljs-comment"># array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">x[[<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]]<br><span class="hljs-comment"># array([2, 3, 4])</span><br><br>index = np.array([[<span class="hljs-number">0</span>,<span class="hljs-number">2</span>],[<span class="hljs-number">1</span>,<span class="hljs-number">3</span>]])<br>x[index]<br><span class="hljs-comment"># array([[0, 2], [1, 3]])</span><br></code></pre></td></tr></table></figure><h3 id="获取数组中最大的前-n-个数字"><a href="#获取数组中最大的前-n-个数字" class="headerlink" title="获取数组中最大的前 n 个数字"></a>获取数组中最大的前 n 个数字</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 随机生成1-100之间的10个数字</span><br>arr = np.random.randint(<span class="hljs-number">1</span>, <span class="hljs-number">100</span>, <span class="hljs-number">10</span>)<br>arr<br><span class="hljs-comment"># array([37, 30, 76, 20, 63, 80, 42, 83, 91, 67])</span><br><br><span class="hljs-comment"># arr.argsort() 会返回排序后的索引index，好像都是从小到大排序</span><br><span class="hljs-comment"># 取最大值对应的3个下标</span><br>arr.argsort()[-<span class="hljs-number">3</span>:]<br><span class="hljs-comment"># array([5, 7, 8], dtype=int64)</span><br><br>arr[arr.argsort()[-<span class="hljs-number">3</span>:]]<br><span class="hljs-comment"># array([80, 83, 91])</span><br></code></pre></td></tr></table></figure><h3 id="二维数组举例"><a href="#二维数组举例" class="headerlink" title="二维数组举例"></a>二维数组举例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python">Y = np.arange(<span class="hljs-number">20</span>).reshape(<span class="hljs-number">4</span>, <span class="hljs-number">5</span>)<br>Y<br><span class="hljs-comment"># array([[ 0, 1, 2, 3, 4], [ 5, 6, 7, 8, 9], </span><br><span class="hljs-comment">#        [10, 11, 12, 13, 14], [15, 16, 17, 18, 19]])</span><br><br><span class="hljs-comment"># 筛选多行 列可以省略，默认第一个维度，就是行</span><br>Y[[<span class="hljs-number">0</span>,<span class="hljs-number">2</span>]]<br><span class="hljs-comment"># array([[ 0, 1, 2, 3, 4], [10, 11, 12, 13, 14]])</span><br><br>Y[[<span class="hljs-number">0</span>,<span class="hljs-number">2</span>],:]<br><span class="hljs-comment"># array([[ 0, 1, 2, 3, 4], [10, 11, 12, 13, 14]])</span><br><br><span class="hljs-comment"># 筛选多列 行不能省略</span><br>Y[:,[<span class="hljs-number">0</span>, <span class="hljs-number">2</span>]]<br><span class="hljs-comment">#array([[ 0, 2], [ 5, 7], [10, 12], [15, 17]])</span><br><br><span class="hljs-comment"># 同时指定行列</span><br>Y[[<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>],[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]]<br><span class="hljs-comment"># array([ 1, 12, 18])</span><br></code></pre></td></tr></table></figure><h2 id="布尔索引"><a href="#布尔索引" class="headerlink" title="布尔索引"></a>布尔索引</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">x = np.arange(<span class="hljs-number">10</span>)<br>x<br><span class="hljs-comment"># array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])</span><br><br><span class="hljs-comment"># 返回bool值的数组</span><br>x&gt;<span class="hljs-number">5</span><br><span class="hljs-comment"># array([False, False, False, False, False, False, </span><br><span class="hljs-comment">#       True, True, True, True])</span><br><br>x[x&gt;<span class="hljs-number">5</span>]<br><span class="hljs-comment"># array([6, 7, 8, 9])</span><br></code></pre></td></tr></table></figure><p>通过条件进行赋值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python">x[x&lt;=<span class="hljs-number">5</span>] = <span class="hljs-number">0</span><br>x[x&gt;<span class="hljs-number">5</span>] = <span class="hljs-number">1</span><br>x<br><span class="hljs-comment"># array([0, 0, 0, 0, 0, 0, 1, 1, 1, 1])</span><br><br>x = np.arange(<span class="hljs-number">10</span>)<br>x[x&lt;<span class="hljs-number">5</span>] += <span class="hljs-number">20</span><br>x<br><span class="hljs-comment"># array([20, 21, 22, 23, 24, 5, 6, 7, 8, 9])</span><br><br>Y = np.arange(<span class="hljs-number">20</span>).reshape(<span class="hljs-number">4</span>, <span class="hljs-number">5</span>)<br>Y &gt; <span class="hljs-number">5</span><br><span class="hljs-comment"># array([[False, False, False, False, False], </span><br><span class="hljs-comment">#        [False, True, True, True, True], </span><br><span class="hljs-comment">#        [ True, True, True, True, True], </span><br><span class="hljs-comment">#        [ True, True, True, True, True]])</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">_<span class="hljs-comment"># Y&gt;5的boolean数组 既有行又有列 因此返回的是 行列一维数组_</span><br>Y[Y&gt;<span class="hljs-number">5</span>]<br><span class="hljs-comment"># array([ 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">Y[:,<span class="hljs-number">3</span>]<br><span class="hljs-comment"># array([ 3, 8, 13, 18])</span><br><br>Y[:, <span class="hljs-number">3</span>]&gt;<span class="hljs-number">5</span><br><span class="hljs-comment"># array([False, True, True, True])</span><br><br><span class="hljs-comment"># 把第3列大于5的行数据筛选出来</span><br>Y[:, <span class="hljs-number">3</span>][Y[:, <span class="hljs-number">3</span>]&gt;<span class="hljs-number">5</span>]<br><span class="hljs-comment"># array([ 8, 13, 18])</span><br></code></pre></td></tr></table></figure><h3 id="条件的组合"><a href="#条件的组合" class="headerlink" title="条件的组合"></a>条件的组合</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">x = np.arange(<span class="hljs-number">10</span>)<br>x<br><span class="hljs-comment"># array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])</span><br><br>condition = (x%<span class="hljs-number">2</span>==<span class="hljs-number">0</span>)| (x&gt;<span class="hljs-number">7</span>)<br>condition<br><span class="hljs-comment"># array([ True, False, True, False, True, </span><br><span class="hljs-comment">#         False, True, False, True, True])</span><br><br>x[condition]<br><span class="hljs-comment"># array([0, 2, 4, 6, 8, 9])</span><br></code></pre></td></tr></table></figure><h1 id="Numpy-的操作与函数"><a href="#Numpy-的操作与函数" class="headerlink" title="Numpy 的操作与函数"></a>Numpy 的操作与函数</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python">A  = np.arange(<span class="hljs-number">6</span>).reshape(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>)<br>A<br><span class="hljs-comment"># array([[0, 1, 2], [3, 4, 5]])</span><br><br><span class="hljs-comment"># 相当于 A中的每个数据都+1</span><br>A+<span class="hljs-number">1</span><br><span class="hljs-comment"># array([[1, 2, 3], [4, 5, 6]])</span><br><br><span class="hljs-comment"># 相当于 A中的每个数据都*3</span><br>A*<span class="hljs-number">3</span><br><span class="hljs-comment"># array([[ 0, 3, 6], [ 9, 12, 15]])</span><br><br>np.sin(A)<br><span class="hljs-comment"># 单位是弧度</span><br><span class="hljs-comment"># array([[ 0. , 0.84147098, 0.90929743], </span><br><span class="hljs-comment">#        [ 0.14112001, -0.7568025 , -0.95892427]])</span><br><br>np.exp(A)<br><span class="hljs-comment">#array([[ 1. , 2.71828183, 7.3890561 ], </span><br><span class="hljs-comment">#     [ 20.08553692, 54.59815003, 148.4131591 ]])</span><br><br>B  = np.arange(<span class="hljs-number">6</span>,<span class="hljs-number">12</span>).reshape(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>)<br>B<br><span class="hljs-comment"># array([[ 6, 7, 8], [ 9, 10, 11]])</span><br><br><span class="hljs-comment"># 对应位置元素相加</span><br>A + B<br><span class="hljs-comment"># array([[ 6, 8, 10], [12, 14, 16]])</span><br><br><span class="hljs-comment"># 对应位置元素相减</span><br>A - B <br><span class="hljs-comment"># array([[-6, -6, -6], [-6, -6, -6]])</span><br><br><span class="hljs-comment"># 对应位置元素相乘</span><br>A*B<br><span class="hljs-comment"># array([[ 0, 7, 16], [27, 40, 55]])</span><br></code></pre></td></tr></table></figure><h2 id="numpy-的数学统计函数"><a href="#numpy-的数学统计函数" class="headerlink" title="numpy 的数学统计函数"></a>numpy 的数学统计函数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs python">arr = np.arange(<span class="hljs-number">12</span>).reshape(<span class="hljs-number">3</span>,<span class="hljs-number">4</span>)<br>arr<br><span class="hljs-comment"># array([[ 0, 1, 2, 3], [ 4, 5, 6, 7], [ 8, 9, 10, 11]])</span><br><br><span class="hljs-comment"># 求和</span><br>np.<span class="hljs-built_in">sum</span>(arr)<br><span class="hljs-comment"># 66</span><br><br><span class="hljs-comment"># 乘积</span><br>np.prod(arr)<br><span class="hljs-comment"># 0</span><br><br><span class="hljs-comment"># 累加</span><br>np.cumsum(arr)<br><span class="hljs-comment"># array([ 0, 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, 66], dtype=int32)</span><br><br><span class="hljs-comment"># 累乘</span><br>np.cumprod(arr)<br><span class="hljs-comment"># array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], dtype=int32)</span><br><br><span class="hljs-comment"># 最小值</span><br>np.<span class="hljs-built_in">min</span>(arr)<br><span class="hljs-comment"># 0</span><br><br><span class="hljs-comment"># 最大值</span><br>np.<span class="hljs-built_in">max</span>(arr)<br><span class="hljs-comment"># 11</span><br><br><span class="hljs-comment"># 求取数列第?分位的数值,50就是中位数</span><br>np.percentile(arr,[<span class="hljs-number">25</span>,<span class="hljs-number">50</span>,<span class="hljs-number">75</span>])<br><span class="hljs-comment"># array([2.75, 5.5 , 8.25])</span><br><br><span class="hljs-comment"># 功能同上面  只不过范围为0-1直接</span><br>np.quantile(arr,[<span class="hljs-number">0.25</span>,<span class="hljs-number">0.5</span>,<span class="hljs-number">0.75</span>])<br><span class="hljs-comment"># array([2.75, 5.5 , 8.25])</span><br><br><span class="hljs-comment">#中位数</span><br>np.median(arr)<br><span class="hljs-comment"># 5.5</span><br><br><span class="hljs-comment"># 平均值</span><br>np.mean(arr)<br><span class="hljs-comment"># 5.5</span><br><br><span class="hljs-comment"># 标准差</span><br>np.std(arr)<br><span class="hljs-comment"># 3.452052529534663</span><br><br><span class="hljs-comment"># 方差</span><br>np.var(arr)<br><span class="hljs-comment"># 11.916666666666666</span><br><br><span class="hljs-comment"># 加权平均</span><br><span class="hljs-comment"># weights 的 shape 需要和 arr 一样</span><br>weights = np.random.rand(*arr.shape)<br>np.average(arr, weights=weights)<br><span class="hljs-comment"># 5.355698948848374</span><br></code></pre></td></tr></table></figure><h1 id="numpy-的-axis-参数"><a href="#numpy-的-axis-参数" class="headerlink" title="numpy 的 axis 参数"></a><strong>numpy 的 axis 参数</strong></h1><p>axis&#x3D;0 代表行 axis&#x3D;1 代表列</p><p>对于 sum&#x2F;mean&#x2F;media 等聚合函数：</p><ul><li>axis&#x3D;0 代表把行消解掉，axis&#x3D;1 代表把列消解掉</li><li>axis&#x3D;0 代表跨行计算， axis&#x3D;1 代表跨列计算</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python">arr = np.arange(<span class="hljs-number">12</span>).reshape(<span class="hljs-number">3</span>,<span class="hljs-number">4</span>)<br>arr<br><span class="hljs-comment"># array([[ 0, 1, 2, 3], [ 4, 5, 6, 7], [ 8, 9, 10, 11]])</span><br><br>arr.<span class="hljs-built_in">sum</span>(axis=<span class="hljs-number">0</span>)<br><span class="hljs-comment"># array([12, 15, 18, 21])</span><br><br>arr.<span class="hljs-built_in">sum</span>(axis=<span class="hljs-number">1</span>)<br><span class="hljs-comment"># array([ 6, 22, 38])</span><br><br>arr.cumsum(axis=<span class="hljs-number">0</span>)<br><span class="hljs-comment"># array([[ 0, 1, 2, 3], [ 4, 6, 8, 10], [12, 15, 18, 21]], </span><br><span class="hljs-comment"># dtype=int32)</span><br><br>arr.cumsum(axis=<span class="hljs-number">1</span>)<br><span class="hljs-comment"># array([[ 0, 1, 3, 6], [ 4, 9, 15, 22], [ 8, 17, 27, 38]], </span><br><span class="hljs-comment"># dtype=int32)</span><br><br>mean = np.mean(arr, axis=<span class="hljs-number">0</span>)<br>mean<br><span class="hljs-comment"># array([4., 5., 6., 7.])</span><br><br>std = np.std(arr,axis=<span class="hljs-number">0</span>)<br>std<br><span class="hljs-comment"># array([3.26598632, 3.26598632, 3.26598632, 3.26598632])</span><br><br>result = arr-mean<br>result<br><span class="hljs-comment"># array([[-4., -4., -4., -4.], [ 0., 0., 0., 0.], </span><br><span class="hljs-comment">#        [ 4., 4., 4., 4.]])</span><br></code></pre></td></tr></table></figure><h1 id="numpy-给数组添加维度"><a href="#numpy-给数组添加维度" class="headerlink" title="numpy 给数组添加维度"></a><strong>numpy 给数组添加维度</strong></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">arr = np.arange(<span class="hljs-number">5</span>)<br>arr<br><span class="hljs-comment"># array([0, 1, 2, 3, 4])</span><br><br>arr.shape<br><span class="hljs-comment"># (5,)</span><br></code></pre></td></tr></table></figure><h2 id="方法-1"><a href="#方法-1" class="headerlink" title="方法 1"></a>方法 1</h2><p>np.newaxis</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python">np.newaxis 就是<span class="hljs-literal">None</span>的别名<br><br>np.newaxis <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span><br><span class="hljs-comment"># True</span><br><br>np.newaxis == <span class="hljs-literal">None</span><br><span class="hljs-comment"># True</span><br><br><span class="hljs-comment"># 给一维向量添加一个行维度</span><br>arr[np.newaxis, :]<br><span class="hljs-comment"># array([[0, 1, 2, 3, 4]])</span><br><br>arr[np.newaxis, :].shape<br><span class="hljs-comment"># (1, 5)</span><br><br><span class="hljs-comment"># 给一维向量添加一个列维度</span><br>arr[:, np.newaxis]<br><span class="hljs-comment"># array([[0], [1], [2], [3], [4]])</span><br><br>arr[:,np.newaxis].shape<br><span class="hljs-comment"># (5, 1)</span><br></code></pre></td></tr></table></figure><h2 id="方法-2"><a href="#方法-2" class="headerlink" title="方法 2"></a>方法 2</h2><p>np.expand_dims</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 给一维向量添加一个行维度</span><br>np.expand_dims(arr, axis=<span class="hljs-number">0</span>)<br><span class="hljs-comment"># array([[0, 1, 2, 3, 4]])</span><br><br>np.expand_dims(arr,axis=<span class="hljs-number">0</span>).shape<br><span class="hljs-comment"># (1, 5)</span><br><br><span class="hljs-comment"># 给一维向量添加一个列维度</span><br>np.expand_dims(arr,axis=<span class="hljs-number">1</span>)<br><span class="hljs-comment"># array([[0], [1], [2], [3], [4]])</span><br><br>np.expand_dims(arr,axis=<span class="hljs-number">1</span>).shape<br><span class="hljs-comment"># (5, 1)</span><br></code></pre></td></tr></table></figure><p>方法 3</p><p>np.reshape</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python">np.reshape(arr, (<span class="hljs-number">1</span>,<span class="hljs-number">5</span>))<br><span class="hljs-comment"># array([[0, 1, 2, 3, 4]])</span><br><br><span class="hljs-comment"># -1表示 自动计算出结果  </span><br>np.reshape(arr,(<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>))<br><span class="hljs-comment"># array([[0, 1, 2, 3, 4]])</span><br><br>np.reshape(arr,(<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>)).shape<br><span class="hljs-comment"># (1, 5)</span><br><br>np.reshape(arr,(-<span class="hljs-number">1</span>,<span class="hljs-number">1</span>))<br><span class="hljs-comment"># array([[0], [1], [2], [3], [4]])</span><br><br>np.reshape(arr,(-<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)).shape<br><span class="hljs-comment"># (5, 1)</span><br></code></pre></td></tr></table></figure><h1 id="数组合并操作"><a href="#数组合并操作" class="headerlink" title="数组合并操作"></a>数组合并操作</h1><h2 id="合并行"><a href="#合并行" class="headerlink" title="合并行"></a>合并行</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python">a = np.arange(<span class="hljs-number">6</span>).reshape(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>)<br>b = np.arange(<span class="hljs-number">6</span>,<span class="hljs-number">18</span>).reshape(<span class="hljs-number">4</span>,<span class="hljs-number">3</span>)<br>a<br><span class="hljs-comment"># array([[0, 1, 2], [3, 4, 5]])</span><br>b<br><span class="hljs-comment"># array([[ 6, 7, 8], [ 9, 10, 11], </span><br><span class="hljs-comment">#        [12, 13, 14], [15, 16, 17]])</span><br><br>np.concatenate([a,b])<span class="hljs-comment">#(axis=0)</span><br><span class="hljs-comment"># array([[ 0, 1, 2], [ 3, 4, 5], </span><br><span class="hljs-comment">#         [ 6, 7, 8], [ 9, 10, 11], </span><br><span class="hljs-comment">#         [12, 13, 14], [15, 16, 17]])</span><br><br>np.vstack([a,b])<br><span class="hljs-comment"># array([[ 0, 1, 2], [ 3, 4, 5], </span><br><span class="hljs-comment">#        [ 6, 7, 8], [ 9, 10, 11],</span><br><span class="hljs-comment">#        [12, 13, 14], [15, 16, 17]])</span><br><br>np.row_stack([a,b])<br><span class="hljs-comment"># array([[ 0, 1, 2], [ 3, 4, 5], </span><br><span class="hljs-comment">#        [ 6, 7, 8], [ 9, 10, 11], </span><br><span class="hljs-comment">#        [12, 13, 14], [15, 16, 17]])</span><br></code></pre></td></tr></table></figure><h2 id="合并列"><a href="#合并列" class="headerlink" title="合并列"></a>合并列</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python">a = np.arange(<span class="hljs-number">12</span>).reshape(<span class="hljs-number">3</span>,<span class="hljs-number">4</span>)<br>a<br><span class="hljs-comment"># array([[ 0, 1, 2, 3], [ 4, 5, 6, 7], [ 8, 9, 10, 11]])</span><br><br>b = np.arange(<span class="hljs-number">12</span>,<span class="hljs-number">18</span>).reshape(<span class="hljs-number">3</span>,<span class="hljs-number">2</span>)<br>b<br><span class="hljs-comment"># array([[12, 13], [14, 15], [16, 17]])</span><br><br>np.concatenate([a,b],axis=<span class="hljs-number">1</span>)<br><span class="hljs-comment"># array([[ 0, 1, 2, 3, 12, 13], [ 4, 5, 6, 7, 14, 15], </span><br><span class="hljs-comment">#        [ 8, 9, 10, 11, 16, 17]])</span><br><br>np.hstack([a,b])<br><span class="hljs-comment"># array([[ 0, 1, 2, 3, 12, 13], [ 4, 5, 6, 7, 14, 15], </span><br><span class="hljs-comment">#        [ 8, 9, 10, 11, 16, 17]])</span><br><br>np.column_stack([a,b])<br><span class="hljs-comment"># array([[ 0, 1, 2, 3, 12, 13], [ 4, 5, 6, 7, 14, 15], </span><br><span class="hljs-comment">#        [ 8, 9, 10, 11, 16, 17]])</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>内存池实现</title>
    <link href="/2023/04/10/%E5%86%85%E5%AD%98%E6%B1%A0%E5%AE%9E%E7%8E%B0/"/>
    <url>/2023/04/10/%E5%86%85%E5%AD%98%E6%B1%A0%E5%AE%9E%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<p>用c语言实现了一个单块内存池分配，包括初始化、使用内存和释放内存。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MEM_PAGE_SIZE 0x1000</span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">mempool_s</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-type">int</span> block_size; <span class="hljs-comment">// block size:32 bytes</span><br>    <span class="hljs-type">int</span> free_count; <span class="hljs-comment">// count of free block:128</span><br><br>    <span class="hljs-type">void</span> *mem; <span class="hljs-comment">// mem pointer</span><br>    <span class="hljs-type">void</span> *ptr; <span class="hljs-comment">// free block pointer</span><br>&#125; <span class="hljs-type">mempool_t</span>;<br><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">mempool_init</span><span class="hljs-params">(<span class="hljs-type">mempool_t</span> *mp, <span class="hljs-type">size_t</span> block_size)</span><br>&#123;<br>    <span class="hljs-keyword">if</span> (!mp)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    <span class="hljs-comment">/*reset memory, prevent unknown error*/</span><br>    <span class="hljs-built_in">memset</span>(mp, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">mempool_t</span>));  <br><br>    mp-&gt;block_size = block_size;<br>    mp-&gt;free_count = MEM_PAGE_SIZE / block_size;<br><br>    mp-&gt;mem = <span class="hljs-built_in">malloc</span>(MEM_PAGE_SIZE);<br><br>    <span class="hljs-keyword">if</span> (!mp-&gt;mem)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    mp-&gt;ptr = mp-&gt;mem; <span class="hljs-comment">// initialize pointer</span><br><br>    <span class="hljs-type">char</span> *ptr = mp-&gt;ptr;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; mp-&gt;free_count; ++i)<br>    &#123;<br>        *(<span class="hljs-type">char</span> **)ptr = ptr + block_size;<br>        ptr += block_size;<br>    &#125;<br>    *(<span class="hljs-type">char</span> **)ptr = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-type">void</span> *_malloc(<span class="hljs-type">mempool_t</span> *mp, <span class="hljs-type">size_t</span> size)<br>&#123;<br>    <span class="hljs-keyword">if</span> (!mp || mp-&gt;free_count == <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">if</span> (mp-&gt;block_size &lt; size)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br><br>    <span class="hljs-type">void</span> *ptr = mp-&gt;ptr;<br>    mp-&gt;ptr = *(<span class="hljs-type">char</span> **)ptr;<br><br>    mp-&gt;free_count--;<br>    <span class="hljs-keyword">return</span> ptr;<br>    <span class="hljs-comment">// printf(&quot;_malloc\n&quot;);</span><br>&#125;<br><br><span class="hljs-type">void</span> _free(<span class="hljs-type">mempool_t</span> *mp, <span class="hljs-type">void</span> *ptr)<br>&#123;<br>    <span class="hljs-keyword">if</span> (!mp)<br>        <span class="hljs-keyword">return</span>;<br>    *(<span class="hljs-type">char</span> **)ptr = mp-&gt;ptr;<br>    mp-&gt;ptr = ptr;<br><br>    mp-&gt;free_count++;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;_free\n&quot;</span>);<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> malloc(mp,size) _malloc(mp,size)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> free(mp,ptr)    _free(mp,ptr)</span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">mempool_t</span> mp;<br><br>    mempool_init(&amp;mp, <span class="hljs-number">32</span>); <span class="hljs-comment">// init memory pool</span><br><br>    <span class="hljs-type">void</span> *p1 = <span class="hljs-built_in">malloc</span>(&amp;mp,<span class="hljs-number">5</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;p1-&gt;%p\n&quot;</span>,p1);<br>    <span class="hljs-type">void</span> *p2 = <span class="hljs-built_in">malloc</span>(&amp;mp,<span class="hljs-number">10</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;p2-&gt;%p\n&quot;</span>,p2);<br>    <span class="hljs-type">void</span> *p3 = <span class="hljs-built_in">malloc</span>(&amp;mp,<span class="hljs-number">15</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;p3-&gt;%p\n&quot;</span>,p3);<br>    <span class="hljs-type">void</span> *p4 = <span class="hljs-built_in">malloc</span>(&amp;mp,<span class="hljs-number">20</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;p4-&gt;%p\n&quot;</span>,p4);<br><br>    <span class="hljs-built_in">free</span>(&amp;mp,p1);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;mp.ptr-&gt;%p\n&quot;</span>,mp.ptr);<br>    <span class="hljs-built_in">free</span>(&amp;mp,p3);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;mp.ptr-&gt;%p\n&quot;</span>,mp.ptr);<br><br>    <span class="hljs-type">void</span> *p5 = <span class="hljs-built_in">malloc</span>(&amp;mp,<span class="hljs-number">25</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;p5-&gt;%p\n&quot;</span>,p5);<br>    <span class="hljs-type">void</span> *p6 = <span class="hljs-built_in">malloc</span>(&amp;mp,<span class="hljs-number">30</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;p6-&gt;%p\n&quot;</span>,p6);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125; <span class="hljs-comment">// Mem pool</span><br><br></code></pre></td></tr></table></figure><p>用c语言实现了一个单块内存池分配，包括初始化、使用内存和释放内存。</p><hr><h1 id="代码解释"><a href="#代码解释" class="headerlink" title="代码解释"></a>代码解释</h1><h2 id="头文件和宏定义"><a href="#头文件和宏定义" class="headerlink" title="头文件和宏定义"></a>头文件和宏定义</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MEM_PAGE_SIZE 0x1000  <span class="hljs-comment">//4k</span></span><br></code></pre></td></tr></table></figure><p>这部分代码包含了必要的头文件和一个宏定义，MEM_PAGE_SIZE 定义了内存页的大小为 4KB。</p><h2 id="内存池结构体"><a href="#内存池结构体" class="headerlink" title="内存池结构体"></a>内存池结构体</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">mempool_s</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-type">int</span> block_size; <span class="hljs-comment">// block size:32 bytes</span><br>    <span class="hljs-type">int</span> free_count; <span class="hljs-comment">// count of free block:128</span><br><br>    <span class="hljs-type">void</span> *mem; <span class="hljs-comment">// mem pointer</span><br>    <span class="hljs-type">void</span> *ptr; <span class="hljs-comment">// free block pointer</span><br>&#125; <span class="hljs-type">mempool_t</span>;<br></code></pre></td></tr></table></figure><ul><li>mempool_t 结构定义了内存池的基本信息：</li><li>block_size：每个内存块的大小，这里是32字节。</li><li>free_count：可用的内存块数量，这里是根据总内存页大小和每个块大小计算出来的。</li><li>mem：指向分配的内存页的指针。</li><li>ptr：指向下一个可用内存块的指针。</li></ul><h2 id="内存池初始化函数"><a href="#内存池初始化函数" class="headerlink" title="内存池初始化函数"></a>内存池初始化函数</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">mempool_init</span><span class="hljs-params">(<span class="hljs-type">mempool_t</span> *mp, <span class="hljs-type">size_t</span> block_size)</span><br>&#123;<br>    <span class="hljs-keyword">if</span> (!mp)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    <span class="hljs-built_in">memset</span>(mp, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">mempool_t</span>)); <span class="hljs-comment">// reset memory, prevent unknown error</span><br><br>    mp-&gt;block_size = block_size;<br>    mp-&gt;free_count = MEM_PAGE_SIZE / block_size;<br><br>    mp-&gt;mem = <span class="hljs-built_in">malloc</span>(MEM_PAGE_SIZE);<br><br>    <span class="hljs-keyword">if</span> (!mp-&gt;mem)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    mp-&gt;ptr = mp-&gt;mem; <span class="hljs-comment">// initialize pointer</span><br><br>    <span class="hljs-type">char</span> *ptr = mp-&gt;ptr;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; mp-&gt;free_count; ++i)<br>    &#123;<br>        *(<span class="hljs-type">char</span> **)ptr = ptr + block_size;<br>        ptr += block_size;<br>    &#125;<br>    *(<span class="hljs-type">char</span> **)ptr = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>mempool_init 函数用于初始化内存池：<ul><li>通过 memset 将 mempool_t 结构清零。</li><li>计算可用的内存块数量。</li><li>分配一个大小为 MEM_PAGE_SIZE 的内存页。</li><li>初始化 ptr 指针，使其指向第一个可用的内存块。</li><li>设置内存块之间的链表关系。</li></ul></li></ul><h2 id="内存分配函数"><a href="#内存分配函数" class="headerlink" title="内存分配函数"></a>内存分配函数</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> *_malloc(<span class="hljs-type">mempool_t</span> *mp, <span class="hljs-type">size_t</span> size)<br>&#123;<br>    <span class="hljs-keyword">if</span> (!mp || mp-&gt;free_count == <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">if</span> (mp-&gt;block_size &lt; size)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br><br>    <span class="hljs-type">void</span> *ptr = mp-&gt;ptr;<br>    mp-&gt;ptr = *(<span class="hljs-type">char</span> **)ptr;<br><br>    mp-&gt;free_count--;<br>    <span class="hljs-keyword">return</span> ptr;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>_malloc 函数用于从内存池中分配内存：<ul><li>检查输入参数和内存池状态。</li><li>返回 ptr 指针，这是一个指向可用内存块的指针。</li></ul></li></ul><h2 id="内存释放函数"><a href="#内存释放函数" class="headerlink" title="内存释放函数"></a>内存释放函数</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> _free(<span class="hljs-type">mempool_t</span> *mp, <span class="hljs-type">void</span> *ptr)<br>&#123;<br>    <span class="hljs-keyword">if</span> (!mp)<br>        <span class="hljs-keyword">return</span>;<br>    *(<span class="hljs-type">char</span> **)ptr = mp-&gt;ptr;<br>    mp-&gt;ptr = ptr;<br><br>    mp-&gt;free_count++;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;_free\n&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>_free 函数用于释放从内存池中分配的内存：<ul><li>将被释放的内存块添加回内存池的空闲列表。</li></ul></li></ul><h2 id="主函数（测试代码）"><a href="#主函数（测试代码）" class="headerlink" title="主函数（测试代码）"></a>主函数（测试代码）</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">mempool_t</span> mp;<br><br>    mempool_init(&amp;mp, <span class="hljs-number">32</span>); <span class="hljs-comment">// init memory pool</span><br><br>    <span class="hljs-type">void</span> *p1 = <span class="hljs-built_in">malloc</span>(&amp;mp,<span class="hljs-number">5</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;p1-&gt;%p\n&quot;</span>,p1);<br>    <span class="hljs-type">void</span> *p2 = <span class="hljs-built_in">malloc</span>(&amp;mp,<span class="hljs-number">10</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;p2-&gt;%p\n&quot;</span>,p2);<br>    <span class="hljs-type">void</span> *p3 = <span class="hljs-built_in">malloc</span>(&amp;mp,<span class="hljs-number">15</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;p3-&gt;%p\n&quot;</span>,p3);<br>    <span class="hljs-type">void</span> *p4 = <span class="hljs-built_in">malloc</span>(&amp;mp,<span class="hljs-number">20</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;p4-&gt;%p\n&quot;</span>,p4);<br><br>    <span class="hljs-built_in">free</span>(&amp;mp,p1);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;mp.ptr-&gt;%p\n&quot;</span>,mp.ptr);<br>    <span class="hljs-built_in">free</span>(&amp;mp,p3);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;mp.ptr-&gt;%p\n&quot;</span>,mp.ptr);<br><br>    <span class="hljs-type">void</span> *p5 = <span class="hljs-built_in">malloc</span>(&amp;mp,<span class="hljs-number">25</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;p5-&gt;%p\n&quot;</span>,p5);<br>    <span class="hljs-type">void</span> *p6 = <span class="hljs-built_in">malloc</span>(&amp;mp,<span class="hljs-number">30</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;p6-&gt;%p\n&quot;</span>,p6);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>在 main 函数中，我们首先初始化内存池，然后分配和释放几个内存块，以测试内存池的功能。</p><hr><h1 id="代码使用"><a href="#代码使用" class="headerlink" title="代码使用"></a>代码使用</h1><p>在终端输入如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">gcc -o mem ./mem.c<br></code></pre></td></tr></table></figure><p>在当前目录生成mem可执行文件<br>代码执行结果如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">humertank@ubuntu:~/Documents/mem$ ./mem<br>p1-&gt;0x582c965582a0<br>p2-&gt;0x582c965582c0<br>p3-&gt;0x582c965582e0<br>p4-&gt;0x582c96558300<br>_free<br>mp.ptr-&gt;0x582c965582a0<br>_free<br>mp.ptr-&gt;0x582c965582e0<br>p5-&gt;0x582c965582e0<br>p6-&gt;0x582c965582a0<br></code></pre></td></tr></table></figure><h1 id="存在的问题"><a href="#存在的问题" class="headerlink" title="存在的问题"></a>存在的问题</h1><p><strong>这个内存池存在一些问题：</strong></p><ol><li>在 _malloc 和 _free 函数中，当内存池为空或大小不足时，返回了 NULL，会导致无法确定发生了什么错误。可以添加更具描述性的错误消息或使用日志系统来记录错误。</li><li>目前的内存池在释放内存块时只是简单地将其添加到空闲列表中，但没有真正地释放。如果想要完全释放内存，需要添加一个 mempool_destroy 函数来释放所有分配的内存。</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>c++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>快速搜索</title>
    <link href="/2018/08/10/%E5%BF%AB%E9%80%9F%E6%90%9C%E7%B4%A2/"/>
    <url>/2018/08/10/%E5%BF%AB%E9%80%9F%E6%90%9C%E7%B4%A2/</url>
    
    <content type="html"><![CDATA[<p>在处理大量文件和数据的时候，快速搜索工具可以帮助我们提高效率。以下是一些常用的快速搜索工具</p><ul><li><a href="https://www.voidtools.com/">Everything</a><blockquote><p>这是一款Windows上的搜索引擎软件，可以快速搜索本地磁盘文件。它占用内存小，搜索界面简单，搜索速度又快，而且完全免费，还能够基于文件名快速锁定文件和文件夹位置，搜索时也只需输入文件夹或文件的关键字。</p></blockquote></li><li><a href="https://www.listary.com/">Listary</a><blockquote><p>这是一个第三方文件搜索工具，搜索速度比Windows自带的搜索要快很多。安装完软件后，在任意场景下，连续敲击两下键盘的Ctrl键，Listary的文件搜索框就会出现。除了文件搜索功能，Listary还可以实现在特定网站中搜索关键词。</p></blockquote></li></ul><p>然而在日常应用中，遇到问题，我们往往需要借助搜索引擎来解决。那么，搜索引擎的快速搜索有什么技巧吗？</p><hr><h1 id="1-限定关键词"><a href="#1-限定关键词" class="headerlink" title="1. 限定关键词"></a>1. 限定关键词</h1><p>即不使用默认的模糊搜索，使用精确搜索。<br>在搜索词两边加上双引号””如</p><pre><code class="hljs">&quot;sth&quot;&quot;张三&quot;</code></pre><h1 id="2-限定标题"><a href="#2-限定标题" class="headerlink" title="2. 限定标题"></a>2. 限定标题</h1><p>要求网页的标题中包含搜索的关键词</p><pre><code class="hljs">intitle:sthintitle:&quot;张三&quot; </code></pre><h1 id="3-限定标题多个关键词"><a href="#3-限定标题多个关键词" class="headerlink" title="3. 限定标题多个关键词"></a>3. 限定标题多个关键词</h1><p>多个关键词都包含在网页标题中 </p><pre><code class="hljs">allintitle:sth1 sth2allintitle：张三 李四</code></pre><h1 id="4-限定（文章）内容关键词"><a href="#4-限定（文章）内容关键词" class="headerlink" title="4. 限定（文章）内容关键词"></a>4. 限定（文章）内容关键词</h1><p>要求网页的内容中包含搜索的关键词</p><pre><code class="hljs">intext:sthintext:&quot;池晨晨&quot; &quot;浙江大学&quot;</code></pre><h1 id="5-限定网址关键词"><a href="#5-限定网址关键词" class="headerlink" title="5. 限定网址关键词"></a>5. 限定网址关键词</h1><p>要求网页的网址中包含搜索的关键词</p><pre><code class="hljs">inurl:sthinurl: CCTV</code></pre><h1 id="6-限定网址来源"><a href="#6-限定网址来源" class="headerlink" title="6. 限定网址来源"></a>6. 限定网址来源</h1><p>要求搜索的网页来源中包含搜索的关键词</p><pre><code class="hljs">site: sthsite: zhihu.com//搜索的结果来源于知乎如：2024推荐免试 site:zju.edu.cn</code></pre><h1 id="7-限定图片尺寸"><a href="#7-限定图片尺寸" class="headerlink" title="7. 限定图片尺寸"></a>7. 限定图片尺寸</h1><p>要求搜索的图片尺寸中包含搜索的关键词</p><pre><code class="hljs">imagesize: 2560×1440</code></pre><h1 id="8-限定文件格式："><a href="#8-限定文件格式：" class="headerlink" title="8. 限定文件格式："></a>8. 限定文件格式：</h1><p>要求搜索的文件格式</p><pre><code class="hljs">filetype:pdf如了解某个行业的报告：母婴行业:2023 filetype:pdf</code></pre><h1 id="9-油管视频下载"><a href="#9-油管视频下载" class="headerlink" title="9. 油管视频下载"></a>9. 油管视频下载</h1><p>点击网址栏，在www.和you之间加上9x，按回车<br>或者用saveTube</p><h1 id="10-chatGPT"><a href="#10-chatGPT" class="headerlink" title="10. chatGPT"></a>10. chatGPT</h1><h2 id="10-1-扮演专家角色"><a href="#10-1-扮演专家角色" class="headerlink" title="10.1 扮演专家角色"></a>10.1 扮演专家角色</h2><p>问：你是个有 20 年从业经验的世界 500 强的营销顾问，我现在开了个叫“蜜雪冰城”的评价奶茶店，请帮我想三个营销推广的主题</p><p>答：当然，作为一位有 20 年从业经验的营销专家，我非常高兴为你的奶茶店“雪冰城”设计三个营销推广主题。以下是针对不同消费者群体和市场环境的主题方案，</p><h2 id="10-2-告诉chatGPT自己的角色"><a href="#10-2-告诉chatGPT自己的角色" class="headerlink" title="10.2 告诉chatGPT自己的角色"></a>10.2 告诉chatGPT自己的角色</h2><p>问：我是个正在学习python的无其他代码经验的初学者，我希望对一个csv格式的用户调研数据进行分析，请告诉我应该使用哪些工具去辅助我进行分析</p><p>答：对于初学者而言， Python 已经为处理和分析 CSV 文件提供了很多实用的工具。特别是，pandas 库是非常受欢迎且功能强大的数据分析工具。我推荐以下步骤帮助你分析csv数据</p><h2 id="10-3-期望的回答长度"><a href="#10-3-期望的回答长度" class="headerlink" title="10.3 期望的回答长度"></a>10.3 期望的回答长度</h2><p>问：写一篇 800 字的向非物理与材料专业读者介绍超导材料发展历史的文章？</p><h2 id="10-4-一步步思考"><a href="#10-4-一步步思考" class="headerlink" title="10.4 一步步思考"></a>10.4 一步步思考</h2><p>问：一步步思考，解答以下问题：甲和乙两个乡村图书室共有 5000 本藏书，其中甲图书室的藏书比乙图书室多 3x 本。现从甲书室中取出 150 本书放入乙图书室后，甲图书室的藏书仍比乙图书室多本。问甲图书室原有图书多少本？</p><p>A. 2500</p><p>B. 2750</p><p>C. 2950</p><p>D. 3500</p><p>答：我们可以一步步地用代数来解答这个问题。设甲图书室的图书数员为a本，乙图书室的图书数员为b本。根据题意，我们可以建立以下方程组．</p><ol><li>a + b &#x3D; 5000a &#x3D; b + 3</li><li>a &#x3D; b + 3x</li></ol><h2 id="10-5-明确你的要求和目的"><a href="#10-5-明确你的要求和目的" class="headerlink" title="10.5 明确你的要求和目的"></a>10.5 明确你的要求和目的</h2><p>chatGPT并不一定能准确的猜出你的要求</p><h2 id="10-6-提供充分的背景信息"><a href="#10-6-提供充分的背景信息" class="headerlink" title="10.6 提供充分的背景信息"></a>10.6 提供充分的背景信息</h2><p>告诉它为什么这么做，面临的背景是什么</p><h2 id="10-7-始终结构化思考你的prompt"><a href="#10-7-始终结构化思考你的prompt" class="headerlink" title="10.7 始终结构化思考你的prompt"></a>10.7 始终结构化思考你的prompt</h2><table><thead><tr><th>名称</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td>指令词(lnstruction)</td><td>引导模型理解您所需任务或问题的词汇，帮助模型准确理解需求。</td><td>“简述”、”解释”、”翻译”、”总结”、”润色”写一篇文章”等。</td></tr><tr><td>输入 (lnput Data)</td><td>提供给模型的问题或具体内容，应清晰、完整以确保模型生成满意答案。</td><td>当需要总结时，提供的文本；当需要编写 SQL 代码时，提供的数据库表和字段信息。</td></tr><tr><td>背景 (Context) ·可选</td><td>与任务相关的其他信息，提供额外信息以帮助模型更好地理解需求。</td><td>同样是写关于量子计算的科普文章，是写给小学生还是物理专业大学生，得到的内容会完全不同。</td></tr><tr><td>输出要求 (Outputindicator) ·可选</td><td>对模型生成答案的格式、长度等方面的限制。</td><td>“用 50 字以内简述”、”请按以下格式回答： 1.材料… 2.步骤一… 3．步骤二”等。</td></tr></tbody></table>]]></content>
    
    
    
    <tags>
      
      <tag>高效技能</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
